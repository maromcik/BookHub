// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Postgres.Migrations.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    [Migration("20240105141841_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("integer");

                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 2
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 3
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 4
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 6
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 7
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 8
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 9
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 13
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 14
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 15
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 16
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 17
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 18
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 19
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 20
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 21
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 22
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 23
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 24
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 25
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 26
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 27
                        },
                        new
                        {
                            AuthorsId = 10,
                            BooksId = 28
                        },
                        new
                        {
                            AuthorsId = 11,
                            BooksId = 29
                        },
                        new
                        {
                            AuthorsId = 12,
                            BooksId = 30
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 31
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 32
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 33
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 34
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 35
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("GenresId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenre");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            GenresId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            GenresId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 22,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 18
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            GenresId = 19
                        },
                        new
                        {
                            BooksId = 25,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 26,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 31,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 32,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 5
                        });
                });

            modelBuilder.Entity("BookOrder", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("OrdersId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("BookOrder");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            OrdersId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            OrdersId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            OrdersId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            OrdersId = 30
                        },
                        new
                        {
                            BooksId = 6,
                            OrdersId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            OrdersId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            OrdersId = 29
                        },
                        new
                        {
                            BooksId = 8,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            OrdersId = 28
                        },
                        new
                        {
                            BooksId = 10,
                            OrdersId = 27
                        },
                        new
                        {
                            BooksId = 12,
                            OrdersId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            OrdersId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            OrdersId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            OrdersId = 26
                        },
                        new
                        {
                            BooksId = 14,
                            OrdersId = 25
                        },
                        new
                        {
                            BooksId = 15,
                            OrdersId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            OrdersId = 24
                        },
                        new
                        {
                            BooksId = 17,
                            OrdersId = 23
                        },
                        new
                        {
                            BooksId = 18,
                            OrdersId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 12
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 22
                        },
                        new
                        {
                            BooksId = 20,
                            OrdersId = 21
                        },
                        new
                        {
                            BooksId = 20,
                            OrdersId = 20
                        },
                        new
                        {
                            BooksId = 21,
                            OrdersId = 9
                        },
                        new
                        {
                            BooksId = 22,
                            OrdersId = 10
                        },
                        new
                        {
                            BooksId = 23,
                            OrdersId = 11
                        },
                        new
                        {
                            BooksId = 23,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            OrdersId = 2
                        },
                        new
                        {
                            BooksId = 25,
                            OrdersId = 1
                        },
                        new
                        {
                            BooksId = 26,
                            OrdersId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            OrdersId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            OrdersId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            OrdersId = 15
                        },
                        new
                        {
                            BooksId = 31,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 32,
                            OrdersId = 16
                        },
                        new
                        {
                            BooksId = 33,
                            OrdersId = 16
                        },
                        new
                        {
                            BooksId = 33,
                            OrdersId = 17
                        },
                        new
                        {
                            BooksId = 34,
                            OrdersId = 18
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 19
                        });
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("BookUser");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 22,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 25,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 26,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 31,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 32,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "J. K. Rowling"
                        },
                        new
                        {
                            Id = 2,
                            Name = "George R. R. Martin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            Id = 5,
                            Name = "J.R.R. Tolkien"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Jane Austen"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mark Twain"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Charles Dickens"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Harper Lee"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Leo Tolstoy"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Agnes Christie"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ernest Hemingway"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Virginia Woolf"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Arthur Conan Doyle"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Antoine de Saint-Exupéry"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PrimaryGenreId")
                        .HasColumnType("integer");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int>("StockInStorage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryGenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "To Kill a Mockingbird",
                            OverallRating = 61,
                            Price = 10.35m,
                            PrimaryGenreId = 3,
                            PublisherId = 9,
                            StockInStorage = 32
                        },
                        new
                        {
                            Id = 2,
                            Name = "1984",
                            OverallRating = 34,
                            Price = 5.12m,
                            PrimaryGenreId = 3,
                            PublisherId = 14,
                            StockInStorage = 3
                        },
                        new
                        {
                            Id = 3,
                            Name = "James Bond",
                            OverallRating = 85,
                            Price = 5.58m,
                            PrimaryGenreId = 16,
                            PublisherId = 12,
                            StockInStorage = 36
                        },
                        new
                        {
                            Id = 4,
                            Name = "The Great Gatsby",
                            OverallRating = 32,
                            Price = 20.52m,
                            PrimaryGenreId = 5,
                            PublisherId = 6,
                            StockInStorage = 20
                        },
                        new
                        {
                            Id = 5,
                            Name = "One Hundred Years of Solitude",
                            OverallRating = 35,
                            Price = 10.33m,
                            PrimaryGenreId = 15,
                            PublisherId = 4,
                            StockInStorage = 44
                        },
                        new
                        {
                            Id = 6,
                            Name = "The Catcher in the Rye",
                            OverallRating = 87,
                            Price = 23.35m,
                            PrimaryGenreId = 9,
                            PublisherId = 7,
                            StockInStorage = 36
                        },
                        new
                        {
                            Id = 7,
                            Name = "Brave New World",
                            OverallRating = 74,
                            Price = 22.31m,
                            PrimaryGenreId = 18,
                            PublisherId = 6,
                            StockInStorage = 27
                        },
                        new
                        {
                            Id = 8,
                            Name = "The Hobbit",
                            OverallRating = 44,
                            Price = 18.81m,
                            PrimaryGenreId = 7,
                            PublisherId = 6,
                            StockInStorage = 27
                        },
                        new
                        {
                            Id = 9,
                            Name = "Love and Basketball",
                            OverallRating = 75,
                            Price = 7.64m,
                            PrimaryGenreId = 6,
                            PublisherId = 12,
                            StockInStorage = 20
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pride and Prejudice",
                            OverallRating = 89,
                            Price = 11.45m,
                            PrimaryGenreId = 7,
                            PublisherId = 8,
                            StockInStorage = 48
                        },
                        new
                        {
                            Id = 11,
                            Name = "The Lord of the Rings: The Fellowship of the Ring",
                            OverallRating = 38,
                            Price = 12.11m,
                            PrimaryGenreId = 18,
                            PublisherId = 2,
                            StockInStorage = 41
                        },
                        new
                        {
                            Id = 12,
                            Name = "The Chronicles of Narnia: The Lion, the Witch and the Wardrobe",
                            OverallRating = 68,
                            Price = 12.83m,
                            PrimaryGenreId = 3,
                            PublisherId = 13,
                            StockInStorage = 39
                        },
                        new
                        {
                            Id = 13,
                            Name = "Harry Potter and the Philosopher's Stone",
                            OverallRating = 71,
                            Price = 22.84m,
                            PrimaryGenreId = 16,
                            PublisherId = 14,
                            StockInStorage = 2
                        },
                        new
                        {
                            Id = 14,
                            Name = "The Hunger Games",
                            OverallRating = 37,
                            Price = 19.81m,
                            PrimaryGenreId = 2,
                            PublisherId = 2,
                            StockInStorage = 29
                        },
                        new
                        {
                            Id = 15,
                            Name = "The Da Vinci Code",
                            OverallRating = 98,
                            Price = 23.75m,
                            PrimaryGenreId = 16,
                            PublisherId = 11,
                            StockInStorage = 22
                        },
                        new
                        {
                            Id = 16,
                            Name = "A Game of Thrones",
                            OverallRating = 44,
                            Price = 24.93m,
                            PrimaryGenreId = 8,
                            PublisherId = 10,
                            StockInStorage = 11
                        },
                        new
                        {
                            Id = 17,
                            Name = "The Shining",
                            OverallRating = 46,
                            Price = 16.47m,
                            PrimaryGenreId = 15,
                            PublisherId = 14,
                            StockInStorage = 30
                        },
                        new
                        {
                            Id = 18,
                            Name = "The Hitchhiker's Guide to the Galaxy",
                            OverallRating = 49,
                            Price = 5.78m,
                            PrimaryGenreId = 1,
                            PublisherId = 7,
                            StockInStorage = 12
                        },
                        new
                        {
                            Id = 19,
                            Name = "The Alchemist",
                            OverallRating = 41,
                            Price = 10.78m,
                            PrimaryGenreId = 18,
                            PublisherId = 12,
                            StockInStorage = 13
                        },
                        new
                        {
                            Id = 20,
                            Name = "War and Peace",
                            OverallRating = 61,
                            Price = 11.74m,
                            PrimaryGenreId = 18,
                            PublisherId = 3,
                            StockInStorage = 5
                        },
                        new
                        {
                            Id = 21,
                            Name = "Crime and Punishment",
                            OverallRating = 59,
                            Price = 9.57m,
                            PrimaryGenreId = 19,
                            PublisherId = 10,
                            StockInStorage = 20
                        },
                        new
                        {
                            Id = 22,
                            Name = "The Catch-22",
                            OverallRating = 57,
                            Price = 22.48m,
                            PrimaryGenreId = 8,
                            PublisherId = 11,
                            StockInStorage = 42
                        },
                        new
                        {
                            Id = 23,
                            Name = "The Grapes of Wrath",
                            OverallRating = 34,
                            Price = 21.64m,
                            PrimaryGenreId = 6,
                            PublisherId = 14,
                            StockInStorage = 23
                        },
                        new
                        {
                            Id = 24,
                            Name = "Fahrenheit 451",
                            OverallRating = 81,
                            Price = 17.29m,
                            PrimaryGenreId = 19,
                            PublisherId = 4,
                            StockInStorage = 48
                        },
                        new
                        {
                            Id = 25,
                            Name = "Lord of the Flies",
                            OverallRating = 79,
                            Price = 7.47m,
                            PrimaryGenreId = 16,
                            PublisherId = 1,
                            StockInStorage = 46
                        },
                        new
                        {
                            Id = 26,
                            Name = "Moby-Dick",
                            OverallRating = 68,
                            Price = 23.1m,
                            PrimaryGenreId = 14,
                            PublisherId = 10,
                            StockInStorage = 18
                        },
                        new
                        {
                            Id = 27,
                            Name = "Frankenstein",
                            OverallRating = 44,
                            Price = 12.32m,
                            PrimaryGenreId = 8,
                            PublisherId = 3,
                            StockInStorage = 22
                        },
                        new
                        {
                            Id = 28,
                            Name = "Alice's Adventures in Wonderland",
                            OverallRating = 58,
                            Price = 20.31m,
                            PrimaryGenreId = 9,
                            PublisherId = 5,
                            StockInStorage = 7
                        },
                        new
                        {
                            Id = 29,
                            Name = "Dracula",
                            OverallRating = 92,
                            Price = 6.83m,
                            PrimaryGenreId = 9,
                            PublisherId = 3,
                            StockInStorage = 6
                        },
                        new
                        {
                            Id = 30,
                            Name = "The Odyssey",
                            OverallRating = 97,
                            Price = 10.7m,
                            PrimaryGenreId = 7,
                            PublisherId = 9,
                            StockInStorage = 25
                        },
                        new
                        {
                            Id = 31,
                            Name = "Romeo and Juliet",
                            OverallRating = 30,
                            Price = 23.03m,
                            PrimaryGenreId = 8,
                            PublisherId = 7,
                            StockInStorage = 1
                        },
                        new
                        {
                            Id = 32,
                            Name = "Hamlet",
                            OverallRating = 74,
                            Price = 8.64m,
                            PrimaryGenreId = 19,
                            PublisherId = 4,
                            StockInStorage = 42
                        },
                        new
                        {
                            Id = 33,
                            Name = "Macbeth",
                            OverallRating = 60,
                            Price = 16.13m,
                            PrimaryGenreId = 2,
                            PublisherId = 5,
                            StockInStorage = 33
                        },
                        new
                        {
                            Id = 34,
                            Name = "Othello",
                            OverallRating = 38,
                            Price = 17.92m,
                            PrimaryGenreId = 19,
                            PublisherId = 10,
                            StockInStorage = 18
                        },
                        new
                        {
                            Id = 35,
                            Name = "The Divine Comedy",
                            OverallRating = 51,
                            Price = 13.26m,
                            PrimaryGenreId = 17,
                            PublisherId = 1,
                            StockInStorage = 36
                        },
                        new
                        {
                            Id = 36,
                            Name = "Don Quixote",
                            OverallRating = 96,
                            Price = 6.85m,
                            PrimaryGenreId = 18,
                            PublisherId = 10,
                            StockInStorage = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dystopian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Non-fiction"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Children's"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Young Adult"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Historical Romance"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Science Fantasy"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Self-help"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7449),
                            PaymentStatus = 2,
                            TotalPrice = 49.64m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7539),
                            PaymentStatus = 0,
                            TotalPrice = 22.91m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7543),
                            PaymentStatus = 2,
                            TotalPrice = 26.14m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7546),
                            PaymentStatus = 1,
                            TotalPrice = 9.47m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7556),
                            PaymentStatus = 1,
                            TotalPrice = 28.22m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7559),
                            PaymentStatus = 0,
                            TotalPrice = 49.51m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7561),
                            PaymentStatus = 1,
                            TotalPrice = 38.15m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7563),
                            PaymentStatus = 3,
                            TotalPrice = 46.02m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7566),
                            PaymentStatus = 1,
                            TotalPrice = 52.08m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7568),
                            PaymentStatus = 1,
                            TotalPrice = 38.19m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7570),
                            PaymentStatus = 4,
                            TotalPrice = 53.29m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7572),
                            PaymentStatus = 2,
                            TotalPrice = 50.5m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7574),
                            PaymentStatus = 3,
                            TotalPrice = 35.92m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7577),
                            PaymentStatus = 0,
                            TotalPrice = 7.2m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7579),
                            PaymentStatus = 3,
                            TotalPrice = 41.47m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7611),
                            PaymentStatus = 4,
                            TotalPrice = 17.06m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7613),
                            PaymentStatus = 1,
                            TotalPrice = 21.38m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7616),
                            PaymentStatus = 3,
                            TotalPrice = 29.36m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7618),
                            PaymentStatus = 1,
                            TotalPrice = 6.69m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7620),
                            PaymentStatus = 1,
                            TotalPrice = 44.27m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7622),
                            PaymentStatus = 3,
                            TotalPrice = 15.56m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7624),
                            PaymentStatus = 0,
                            TotalPrice = 16.08m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7626),
                            PaymentStatus = 3,
                            TotalPrice = 25.58m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7628),
                            PaymentStatus = 2,
                            TotalPrice = 13.48m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7630),
                            PaymentStatus = 4,
                            TotalPrice = 7.24m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7632),
                            PaymentStatus = 3,
                            TotalPrice = 16.66m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7634),
                            PaymentStatus = 0,
                            TotalPrice = 19.51m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7636),
                            PaymentStatus = 2,
                            TotalPrice = 11.07m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7677),
                            PaymentStatus = 3,
                            TotalPrice = 22.32m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateTime(2024, 1, 5, 15, 18, 41, 478, DateTimeKind.Local).AddTicks(7683),
                            PaymentStatus = 0,
                            TotalPrice = 21.51m,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bloomsbury"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Secker & Warburg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reynal & Hitchcock"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Penguin Books"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Random House"
                        },
                        new
                        {
                            Id = 6,
                            Name = "HarperCollins"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Macmillan Publishers"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hachette Book Group"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Scholastic Corporation"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Oxford University Press"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Cambridge University Press"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Wiley"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Elsevier"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Springer"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 29,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 10,
                            Value = 25
                        },
                        new
                        {
                            Id = 2,
                            BookId = 26,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 5,
                            Value = 14
                        },
                        new
                        {
                            Id = 3,
                            BookId = 19,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 7,
                            Value = 21
                        },
                        new
                        {
                            Id = 4,
                            BookId = 1,
                            Comment = "A classic that everyone should read",
                            UserId = 12,
                            Value = 76
                        },
                        new
                        {
                            Id = 5,
                            BookId = 19,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 9,
                            Value = 29
                        },
                        new
                        {
                            Id = 6,
                            BookId = 9,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 12,
                            Value = 44
                        },
                        new
                        {
                            Id = 7,
                            BookId = 23,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 5,
                            Value = 73
                        },
                        new
                        {
                            Id = 8,
                            BookId = 31,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 3,
                            Value = 49
                        },
                        new
                        {
                            Id = 9,
                            BookId = 34,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 3,
                            Value = 60
                        },
                        new
                        {
                            Id = 10,
                            BookId = 24,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 9,
                            Value = 66
                        },
                        new
                        {
                            Id = 11,
                            BookId = 3,
                            Comment = "The pacing is perfect, kept me engaged from start to finish",
                            UserId = 6,
                            Value = 28
                        },
                        new
                        {
                            Id = 12,
                            BookId = 16,
                            Comment = "This book challenged my perspective on life",
                            UserId = 12,
                            Value = 83
                        },
                        new
                        {
                            Id = 13,
                            BookId = 4,
                            Comment = "The world-building is exceptional, I felt like I was there",
                            UserId = 2,
                            Value = 96
                        },
                        new
                        {
                            Id = 14,
                            BookId = 15,
                            Comment = "A must-read for book lovers",
                            UserId = 2,
                            Value = 87
                        },
                        new
                        {
                            Id = 15,
                            BookId = 19,
                            Comment = "The author's storytelling is captivating",
                            UserId = 5,
                            Value = 20
                        },
                        new
                        {
                            Id = 16,
                            BookId = 30,
                            Comment = "This book is a page-turner, couldn't stop reading",
                            UserId = 2,
                            Value = 50
                        },
                        new
                        {
                            Id = 17,
                            BookId = 28,
                            Comment = "The dialogue between characters is witty and realistic",
                            UserId = 12,
                            Value = 25
                        },
                        new
                        {
                            Id = 18,
                            BookId = 2,
                            Comment = "I've recommended this book to all my friends",
                            UserId = 10,
                            Value = 15
                        },
                        new
                        {
                            Id = 19,
                            BookId = 20,
                            Comment = "It left me with a book hangover, couldn't stop thinking about it",
                            UserId = 12,
                            Value = 80
                        },
                        new
                        {
                            Id = 20,
                            BookId = 2,
                            Comment = "",
                            UserId = 5,
                            Value = 40
                        },
                        new
                        {
                            Id = 21,
                            BookId = 21,
                            Comment = "Couldn't get into the story, found it boring from the start",
                            UserId = 11,
                            Value = 85
                        },
                        new
                        {
                            Id = 22,
                            BookId = 24,
                            Comment = "The characters felt one-dimensional and uninteresting",
                            UserId = 3,
                            Value = 67
                        },
                        new
                        {
                            Id = 23,
                            BookId = 8,
                            Comment = "The plot was predictable, I expected more twists",
                            UserId = 14,
                            Value = 45
                        },
                        new
                        {
                            Id = 24,
                            BookId = 31,
                            Comment = "I didn't connect with the protagonist, lacked depth",
                            UserId = 7,
                            Value = 64
                        },
                        new
                        {
                            Id = 25,
                            BookId = 22,
                            Comment = "The writing style was confusing and hard to follow",
                            UserId = 5,
                            Value = 37
                        },
                        new
                        {
                            Id = 26,
                            BookId = 1,
                            Comment = "This book didn't live up to the hype, very disappointing",
                            UserId = 10,
                            Value = 65
                        },
                        new
                        {
                            Id = 27,
                            BookId = 33,
                            Comment = "The ending felt rushed and unresolved",
                            UserId = 6,
                            Value = 80
                        },
                        new
                        {
                            Id = 28,
                            BookId = 15,
                            Comment = "Too much exposition, not enough action",
                            UserId = 6,
                            Value = 55
                        },
                        new
                        {
                            Id = 29,
                            BookId = 1,
                            Comment = "I found the dialogue unrealistic and forced",
                            UserId = 1,
                            Value = 38
                        },
                        new
                        {
                            Id = 30,
                            BookId = 31,
                            Comment = "The author tried too hard to be profound, came off as pretentious",
                            UserId = 8,
                            Value = 68
                        },
                        new
                        {
                            Id = 31,
                            BookId = 3,
                            Comment = "The pacing was off, some parts dragged on while others felt rushed",
                            UserId = 8,
                            Value = 80
                        },
                        new
                        {
                            Id = 32,
                            BookId = 30,
                            Comment = "The world-building was weak and inconsistent",
                            UserId = 11,
                            Value = 73
                        },
                        new
                        {
                            Id = 33,
                            BookId = 20,
                            Comment = "I couldn't sympathize with any of the characters",
                            UserId = 7,
                            Value = 37
                        },
                        new
                        {
                            Id = 34,
                            BookId = 11,
                            Comment = "The themes explored were cliché and overdone",
                            UserId = 5,
                            Value = 85
                        },
                        new
                        {
                            Id = 35,
                            BookId = 8,
                            Comment = "The book didn't live up to the reviews, a letdown",
                            UserId = 7,
                            Value = 17
                        },
                        new
                        {
                            Id = 36,
                            BookId = 15,
                            Comment = "The grammar and editing were poor, distracting from the story",
                            UserId = 2,
                            Value = 19
                        },
                        new
                        {
                            Id = 37,
                            BookId = 20,
                            Comment = "The book felt like a rip-off of [another popular book]",
                            UserId = 2,
                            Value = 75
                        },
                        new
                        {
                            Id = 38,
                            BookId = 2,
                            Comment = "The author relied too heavily on stereotypes",
                            UserId = 3,
                            Value = 74
                        },
                        new
                        {
                            Id = 39,
                            BookId = 4,
                            Comment = "I regret spending time on this book, wish I chose something else",
                            UserId = 5,
                            Value = 93
                        },
                        new
                        {
                            Id = 40,
                            BookId = 25,
                            Comment = "The climax was anticlimactic, left me unsatisfied",
                            UserId = 7,
                            Value = 97
                        },
                        new
                        {
                            Id = 41,
                            BookId = 16,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 1,
                            Value = 82
                        },
                        new
                        {
                            Id = 42,
                            BookId = 18,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 6,
                            Value = 88
                        },
                        new
                        {
                            Id = 43,
                            BookId = 26,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 14,
                            Value = 47
                        },
                        new
                        {
                            Id = 44,
                            BookId = 6,
                            Comment = "A classic that everyone should read",
                            UserId = 12,
                            Value = 15
                        },
                        new
                        {
                            Id = 45,
                            BookId = 23,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 4,
                            Value = 44
                        },
                        new
                        {
                            Id = 46,
                            BookId = 14,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 8,
                            Value = 40
                        },
                        new
                        {
                            Id = 47,
                            BookId = 21,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 7,
                            Value = 94
                        },
                        new
                        {
                            Id = 48,
                            BookId = 30,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 2,
                            Value = 68
                        },
                        new
                        {
                            Id = 49,
                            BookId = 20,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 5,
                            Value = 29
                        },
                        new
                        {
                            Id = 50,
                            BookId = 17,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 11,
                            Value = 62
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "812d899e-d834-4d03-9e67-4ed1983c7ca0",
                            Email = "Roman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Roman Mario",
                            NormalizedEmail = "ROMAN@GMAIL.COM",
                            NormalizedUserName = "ROMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKPty1+cxXkhKsydbVteJrfkd3P3GolZ9pRHIUntkLBvscW1BR5Tqhq2fkv+3v8mXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0111e96-8696-4474-af59-67b89ed4d972",
                            TwoFactorEnabled = false,
                            UserName = "roman"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "900d3fac-4595-4fac-b9ba-92c5d6701106",
                            Email = "Beth@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Beth Story",
                            NormalizedEmail = "BETH@GMAIL.COM",
                            NormalizedUserName = "BETH",
                            PasswordHash = "AQAAAAIAAYagAAAAEOc4VkD8PChFbpIOFXZDq/kJm7hY4PhF+/j9oVzbcq34melvhCeMtqFSwMvYvljhag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b43cd6aa-5164-4717-8f3d-e73223cb9d26",
                            TwoFactorEnabled = false,
                            UserName = "beth"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c798ae13-6048-4eb6-ab50-f1930f1b639d",
                            Email = "Monika@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Monika Reha",
                            NormalizedEmail = "MONIKA@GMAIL.COM",
                            NormalizedUserName = "MONIKA",
                            PasswordHash = "AQAAAAIAAYagAAAAEKi0nzenPcuZsGT835VfFOalrBze82p4Ya/wzf33HtCi6KTt5j+MZI1UUk8wWkyUOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdeee2d1-dfe4-4d57-b40e-40c7745bb3e6",
                            TwoFactorEnabled = false,
                            UserName = "monika"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afd37b9d-178b-4412-9400-9bc7f520134f",
                            Email = "John@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "John Smith",
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIW40sB8nqIRw9u5iNRYcdaOfG+I60yfrDA3Dyy/9+dYL1AJhomoRzmD3451C+ftAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc4c9d49-d889-4362-a000-a187170abbf2",
                            TwoFactorEnabled = false,
                            UserName = "john"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c6b768d-26a3-49ef-b6eb-1760fdb5c570",
                            Email = "James@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "James Bond",
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES",
                            PasswordHash = "AQAAAAIAAYagAAAAEMoiU77NGF9wli6yQGZWONslBQqPpoYzgBigiQdpj2957Vh/X6Lfr1WhAFtQkuAZqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7ef3eec-95dd-4ac9-9f21-cc243783c70e",
                            TwoFactorEnabled = false,
                            UserName = "james"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43020190-48ba-4b14-88b3-095f0df992a9",
                            Email = "Filip@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Filip Strong",
                            NormalizedEmail = "FILIP@GMAIL.COM",
                            NormalizedUserName = "FILIP",
                            PasswordHash = "AQAAAAIAAYagAAAAEEiOryiHmZlsaBV9NjeOTvSCYueRV+0vnwThXD7yav9hlOBNKTGaunlu6ao+JqTikA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2461f876-aab9-4c82-853e-07b353da1464",
                            TwoFactorEnabled = false,
                            UserName = "filip"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed6a9c5a-5ec9-4f71-9eb7-3d9468cc1e7f",
                            Email = "Random@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Random Guy",
                            NormalizedEmail = "RANDOM@GMAIL.COM",
                            NormalizedUserName = "RANDOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG86G7iwLSr0AcRU00OvNEtaWm1vzs1O1BOGsemwXgApHCAgCEyBrChXvyYm8WG6SQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd1042ed-e1a1-460d-85a0-d34fab3f891f",
                            TwoFactorEnabled = false,
                            UserName = "random"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d733958c-81c1-45ab-bc52-60af9c933017",
                            Email = "Jack@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jack Black",
                            NormalizedEmail = "JACK@GMAIL.COM",
                            NormalizedUserName = "JACK",
                            PasswordHash = "AQAAAAIAAYagAAAAEPiHt5piupx8oWpnQc8ErFeK2svjhHNuZoOP3rLYcj1iLVmC2L41bzRTmc/vkQU1fw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2453ea0a-3932-4367-8ee2-8f0aa35f10b0",
                            TwoFactorEnabled = false,
                            UserName = "jack"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f34a8b5f-58b3-4da2-bad0-065bc9ce7925",
                            Email = "Tom@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tom Smart",
                            NormalizedEmail = "TOM@GMAIL.COM",
                            NormalizedUserName = "TOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBHmOAZAeEq0kcAqM9mWcvidbTZTpoMalHBr1QYZdFkhWum27N6+V9+GaASlI1luDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f30eea0d-a25b-4c53-8bd9-55d8831cbfeb",
                            TwoFactorEnabled = false,
                            UserName = "tom"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2daf342b-d7c7-4f22-9bd3-cc72426f22a6",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Ali Willy",
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAELH6fzqTxtW2sukhtojzAhdY7kdU2Qv/41cEraWcBZ043ArGIcYUa9g8cLd31PjsTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e39cb4c8-68e5-4fe8-b68a-fc608c902d40",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fde263f7-dfcd-481e-bdba-3c69378a4bb6",
                            Email = "Rubber@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Rubber Duck",
                            NormalizedEmail = "RUBBER@GMAIL.COM",
                            NormalizedUserName = "RUBBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEM3R9O9HNL0wEo74UaTcqmA7LmzeBZGWngTEN2pw2wqAgT2KgQbx6ZMCLQqYrQxQQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "213d16b0-0f4e-4957-a75c-ad4446208bd2",
                            TwoFactorEnabled = false,
                            UserName = "rubber"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53f0bb99-ce3e-4aea-ad1a-513962fc2a89",
                            Email = "Olaf@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Olaf Snow",
                            NormalizedEmail = "OLAF@GMAIL.COM",
                            NormalizedUserName = "OLAF",
                            PasswordHash = "AQAAAAIAAYagAAAAEObNcL+vgzh8woz2pv+pF3t+hHz/5hBOuJPKyBaEMgQNJ5oTlFV3bh0fWRo+eH/B8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1176e823-a72a-4dc2-94c0-135484b305fe",
                            TwoFactorEnabled = false,
                            UserName = "olaf"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2eece890-8470-4e9d-9c75-5d429472cc21",
                            Email = "Good@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Good Programmer",
                            NormalizedEmail = "GOOD@GMAIL.COM",
                            NormalizedUserName = "GOOD",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ/yapvx4cHWrMikd9Sue5FF17mAlcsjwNKrOb0gzwyJxkJx48Cmmd0K39zJOVtRGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "379b34a2-6ece-4ff6-8654-e774e1b03637",
                            TwoFactorEnabled = false,
                            UserName = "good"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db1962ef-8137-4e25-bd8d-b2294f08a628",
                            Email = "Tim@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tim King",
                            NormalizedEmail = "TIM@GMAIL.COM",
                            NormalizedUserName = "TIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJNg5MeJtATn4LU3jpVxBJI3b7ju/EmY6kqu7AXLJ5g26V+UHcpz7K7bUPmbTgAJTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b2a0ab8-803e-4c2b-8e2f-36e650366707",
                            TwoFactorEnabled = false,
                            UserName = "tim"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01e1205d-40cf-467b-8e6d-ae351b697a7b",
                            Email = "Adam@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Adam Queen",
                            NormalizedEmail = "ADAM@GMAIL.COM",
                            NormalizedUserName = "ADAM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHxZKa8cdOou5zxRi2zuHorhQ8jrkj6ibZwdmjpBLqYq7sCkpiumww5Z0rGXfesLpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78f71dc5-7e66-4147-acc8-f6a8879b563e",
                            TwoFactorEnabled = false,
                            UserName = "adam"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookOrder", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Genre", "PrimaryGenre")
                        .WithMany("PrimaryGenreBooks")
                        .HasForeignKey("PrimaryGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryGenre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Navigation("PrimaryGenreBooks");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
