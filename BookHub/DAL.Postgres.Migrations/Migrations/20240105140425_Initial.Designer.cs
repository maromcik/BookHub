// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Postgres.Migrations.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    [Migration("20240105140425_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("integer");

                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 2
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 3
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 4
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 6
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 7
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 8
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 9
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 13
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 14
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 15
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 16
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 17
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 18
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 19
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 20
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 21
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 22
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 23
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 24
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 25
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 26
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 27
                        },
                        new
                        {
                            AuthorsId = 10,
                            BooksId = 28
                        },
                        new
                        {
                            AuthorsId = 11,
                            BooksId = 29
                        },
                        new
                        {
                            AuthorsId = 12,
                            BooksId = 30
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 31
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 32
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 33
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 34
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 35
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("GenresId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenre");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            GenresId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            GenresId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 22,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 18
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            GenresId = 19
                        },
                        new
                        {
                            BooksId = 25,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 26,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 31,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 32,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 5
                        });
                });

            modelBuilder.Entity("BookOrder", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("OrdersId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("BookOrder");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            OrdersId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            OrdersId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            OrdersId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            OrdersId = 30
                        },
                        new
                        {
                            BooksId = 6,
                            OrdersId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            OrdersId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            OrdersId = 29
                        },
                        new
                        {
                            BooksId = 8,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            OrdersId = 28
                        },
                        new
                        {
                            BooksId = 10,
                            OrdersId = 27
                        },
                        new
                        {
                            BooksId = 12,
                            OrdersId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            OrdersId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            OrdersId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            OrdersId = 26
                        },
                        new
                        {
                            BooksId = 14,
                            OrdersId = 25
                        },
                        new
                        {
                            BooksId = 15,
                            OrdersId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            OrdersId = 24
                        },
                        new
                        {
                            BooksId = 17,
                            OrdersId = 23
                        },
                        new
                        {
                            BooksId = 18,
                            OrdersId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 12
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 22
                        },
                        new
                        {
                            BooksId = 20,
                            OrdersId = 21
                        },
                        new
                        {
                            BooksId = 20,
                            OrdersId = 20
                        },
                        new
                        {
                            BooksId = 21,
                            OrdersId = 9
                        },
                        new
                        {
                            BooksId = 22,
                            OrdersId = 10
                        },
                        new
                        {
                            BooksId = 23,
                            OrdersId = 11
                        },
                        new
                        {
                            BooksId = 23,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            OrdersId = 2
                        },
                        new
                        {
                            BooksId = 25,
                            OrdersId = 1
                        },
                        new
                        {
                            BooksId = 26,
                            OrdersId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            OrdersId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            OrdersId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            OrdersId = 15
                        },
                        new
                        {
                            BooksId = 31,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 32,
                            OrdersId = 16
                        },
                        new
                        {
                            BooksId = 33,
                            OrdersId = 16
                        },
                        new
                        {
                            BooksId = 33,
                            OrdersId = 17
                        },
                        new
                        {
                            BooksId = 34,
                            OrdersId = 18
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 19
                        });
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("BookUser");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 22,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 25,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 26,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 31,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 32,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "J. K. Rowling"
                        },
                        new
                        {
                            Id = 2,
                            Name = "George R. R. Martin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            Id = 5,
                            Name = "J.R.R. Tolkien"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Jane Austen"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mark Twain"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Charles Dickens"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Harper Lee"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Leo Tolstoy"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Agnes Christie"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ernest Hemingway"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Virginia Woolf"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Arthur Conan Doyle"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Antoine de Saint-Exupéry"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PrimaryGenreId")
                        .HasColumnType("integer");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int>("StockInStorage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryGenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "To Kill a Mockingbird",
                            OverallRating = 34,
                            Price = 23.01m,
                            PrimaryGenreId = 7,
                            PublisherId = 6,
                            StockInStorage = 21
                        },
                        new
                        {
                            Id = 2,
                            Name = "1984",
                            OverallRating = 56,
                            Price = 7.71m,
                            PrimaryGenreId = 13,
                            PublisherId = 4,
                            StockInStorage = 33
                        },
                        new
                        {
                            Id = 3,
                            Name = "James Bond",
                            OverallRating = 33,
                            Price = 10.59m,
                            PrimaryGenreId = 12,
                            PublisherId = 2,
                            StockInStorage = 20
                        },
                        new
                        {
                            Id = 4,
                            Name = "The Great Gatsby",
                            OverallRating = 79,
                            Price = 15.45m,
                            PrimaryGenreId = 15,
                            PublisherId = 3,
                            StockInStorage = 33
                        },
                        new
                        {
                            Id = 5,
                            Name = "One Hundred Years of Solitude",
                            OverallRating = 40,
                            Price = 12.33m,
                            PrimaryGenreId = 2,
                            PublisherId = 13,
                            StockInStorage = 14
                        },
                        new
                        {
                            Id = 6,
                            Name = "The Catcher in the Rye",
                            OverallRating = 46,
                            Price = 8.83m,
                            PrimaryGenreId = 10,
                            PublisherId = 2,
                            StockInStorage = 21
                        },
                        new
                        {
                            Id = 7,
                            Name = "Brave New World",
                            OverallRating = 86,
                            Price = 23.92m,
                            PrimaryGenreId = 1,
                            PublisherId = 4,
                            StockInStorage = 8
                        },
                        new
                        {
                            Id = 8,
                            Name = "The Hobbit",
                            OverallRating = 85,
                            Price = 24.61m,
                            PrimaryGenreId = 11,
                            PublisherId = 11,
                            StockInStorage = 10
                        },
                        new
                        {
                            Id = 9,
                            Name = "Love and Basketball",
                            OverallRating = 94,
                            Price = 9.35m,
                            PrimaryGenreId = 15,
                            PublisherId = 13,
                            StockInStorage = 42
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pride and Prejudice",
                            OverallRating = 71,
                            Price = 21.08m,
                            PrimaryGenreId = 3,
                            PublisherId = 1,
                            StockInStorage = 29
                        },
                        new
                        {
                            Id = 11,
                            Name = "The Lord of the Rings: The Fellowship of the Ring",
                            OverallRating = 54,
                            Price = 16.32m,
                            PrimaryGenreId = 13,
                            PublisherId = 11,
                            StockInStorage = 19
                        },
                        new
                        {
                            Id = 12,
                            Name = "The Chronicles of Narnia: The Lion, the Witch and the Wardrobe",
                            OverallRating = 81,
                            Price = 6.8m,
                            PrimaryGenreId = 8,
                            PublisherId = 6,
                            StockInStorage = 30
                        },
                        new
                        {
                            Id = 13,
                            Name = "Harry Potter and the Philosopher's Stone",
                            OverallRating = 68,
                            Price = 19.66m,
                            PrimaryGenreId = 18,
                            PublisherId = 13,
                            StockInStorage = 34
                        },
                        new
                        {
                            Id = 14,
                            Name = "The Hunger Games",
                            OverallRating = 65,
                            Price = 7.56m,
                            PrimaryGenreId = 4,
                            PublisherId = 7,
                            StockInStorage = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "The Da Vinci Code",
                            OverallRating = 40,
                            Price = 14.02m,
                            PrimaryGenreId = 1,
                            PublisherId = 8,
                            StockInStorage = 13
                        },
                        new
                        {
                            Id = 16,
                            Name = "A Game of Thrones",
                            OverallRating = 41,
                            Price = 12.44m,
                            PrimaryGenreId = 17,
                            PublisherId = 10,
                            StockInStorage = 35
                        },
                        new
                        {
                            Id = 17,
                            Name = "The Shining",
                            OverallRating = 70,
                            Price = 19.17m,
                            PrimaryGenreId = 3,
                            PublisherId = 6,
                            StockInStorage = 34
                        },
                        new
                        {
                            Id = 18,
                            Name = "The Hitchhiker's Guide to the Galaxy",
                            OverallRating = 45,
                            Price = 10.46m,
                            PrimaryGenreId = 17,
                            PublisherId = 9,
                            StockInStorage = 18
                        },
                        new
                        {
                            Id = 19,
                            Name = "The Alchemist",
                            OverallRating = 33,
                            Price = 6.01m,
                            PrimaryGenreId = 7,
                            PublisherId = 9,
                            StockInStorage = 11
                        },
                        new
                        {
                            Id = 20,
                            Name = "War and Peace",
                            OverallRating = 91,
                            Price = 10.15m,
                            PrimaryGenreId = 12,
                            PublisherId = 13,
                            StockInStorage = 25
                        },
                        new
                        {
                            Id = 21,
                            Name = "Crime and Punishment",
                            OverallRating = 51,
                            Price = 7.42m,
                            PrimaryGenreId = 4,
                            PublisherId = 13,
                            StockInStorage = 7
                        },
                        new
                        {
                            Id = 22,
                            Name = "The Catch-22",
                            OverallRating = 86,
                            Price = 18.37m,
                            PrimaryGenreId = 10,
                            PublisherId = 4,
                            StockInStorage = 19
                        },
                        new
                        {
                            Id = 23,
                            Name = "The Grapes of Wrath",
                            OverallRating = 78,
                            Price = 18.18m,
                            PrimaryGenreId = 2,
                            PublisherId = 14,
                            StockInStorage = 23
                        },
                        new
                        {
                            Id = 24,
                            Name = "Fahrenheit 451",
                            OverallRating = 68,
                            Price = 15.56m,
                            PrimaryGenreId = 14,
                            PublisherId = 13,
                            StockInStorage = 8
                        },
                        new
                        {
                            Id = 25,
                            Name = "Lord of the Flies",
                            OverallRating = 98,
                            Price = 17.68m,
                            PrimaryGenreId = 8,
                            PublisherId = 5,
                            StockInStorage = 19
                        },
                        new
                        {
                            Id = 26,
                            Name = "Moby-Dick",
                            OverallRating = 72,
                            Price = 13.65m,
                            PrimaryGenreId = 15,
                            PublisherId = 6,
                            StockInStorage = 5
                        },
                        new
                        {
                            Id = 27,
                            Name = "Frankenstein",
                            OverallRating = 62,
                            Price = 8.67m,
                            PrimaryGenreId = 19,
                            PublisherId = 8,
                            StockInStorage = 6
                        },
                        new
                        {
                            Id = 28,
                            Name = "Alice's Adventures in Wonderland",
                            OverallRating = 67,
                            Price = 13.15m,
                            PrimaryGenreId = 4,
                            PublisherId = 8,
                            StockInStorage = 7
                        },
                        new
                        {
                            Id = 29,
                            Name = "Dracula",
                            OverallRating = 85,
                            Price = 12.99m,
                            PrimaryGenreId = 9,
                            PublisherId = 10,
                            StockInStorage = 46
                        },
                        new
                        {
                            Id = 30,
                            Name = "The Odyssey",
                            OverallRating = 86,
                            Price = 19.18m,
                            PrimaryGenreId = 16,
                            PublisherId = 12,
                            StockInStorage = 36
                        },
                        new
                        {
                            Id = 31,
                            Name = "Romeo and Juliet",
                            OverallRating = 67,
                            Price = 24.76m,
                            PrimaryGenreId = 7,
                            PublisherId = 12,
                            StockInStorage = 8
                        },
                        new
                        {
                            Id = 32,
                            Name = "Hamlet",
                            OverallRating = 30,
                            Price = 17.54m,
                            PrimaryGenreId = 16,
                            PublisherId = 11,
                            StockInStorage = 46
                        },
                        new
                        {
                            Id = 33,
                            Name = "Macbeth",
                            OverallRating = 31,
                            Price = 13.15m,
                            PrimaryGenreId = 1,
                            PublisherId = 3,
                            StockInStorage = 16
                        },
                        new
                        {
                            Id = 34,
                            Name = "Othello",
                            OverallRating = 31,
                            Price = 22.04m,
                            PrimaryGenreId = 5,
                            PublisherId = 14,
                            StockInStorage = 13
                        },
                        new
                        {
                            Id = 35,
                            Name = "The Divine Comedy",
                            OverallRating = 39,
                            Price = 20.48m,
                            PrimaryGenreId = 12,
                            PublisherId = 14,
                            StockInStorage = 10
                        },
                        new
                        {
                            Id = 36,
                            Name = "Don Quixote",
                            OverallRating = 71,
                            Price = 7.01m,
                            PrimaryGenreId = 17,
                            PublisherId = 14,
                            StockInStorage = 15
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dystopian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Non-fiction"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Children's"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Young Adult"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Historical Romance"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Science Fantasy"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Self-help"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(6979),
                            PaymentStatus = 2,
                            TotalPrice = 42.33m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(7079),
                            PaymentStatus = 2,
                            TotalPrice = 43.29m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(7084),
                            PaymentStatus = 0,
                            TotalPrice = 12.85m,
                            UserId = 12
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(7087),
                            PaymentStatus = 1,
                            TotalPrice = 14.85m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8255),
                            PaymentStatus = 1,
                            TotalPrice = 42.03m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8262),
                            PaymentStatus = 0,
                            TotalPrice = 7.62m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8266),
                            PaymentStatus = 4,
                            TotalPrice = 38.8m,
                            UserId = 11
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8268),
                            PaymentStatus = 4,
                            TotalPrice = 52.12m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8271),
                            PaymentStatus = 2,
                            TotalPrice = 38m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8274),
                            PaymentStatus = 4,
                            TotalPrice = 53.98m,
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8276),
                            PaymentStatus = 1,
                            TotalPrice = 18.11m,
                            UserId = 12
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8279),
                            PaymentStatus = 2,
                            TotalPrice = 5.98m,
                            UserId = 11
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8281),
                            PaymentStatus = 1,
                            TotalPrice = 27.3m,
                            UserId = 11
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8284),
                            PaymentStatus = 3,
                            TotalPrice = 24.18m,
                            UserId = 10
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8286),
                            PaymentStatus = 2,
                            TotalPrice = 20.57m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8308),
                            PaymentStatus = 0,
                            TotalPrice = 29.45m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8311),
                            PaymentStatus = 2,
                            TotalPrice = 36.22m,
                            UserId = 12
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8314),
                            PaymentStatus = 0,
                            TotalPrice = 50.3m,
                            UserId = 14
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8317),
                            PaymentStatus = 0,
                            TotalPrice = 11.23m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8320),
                            PaymentStatus = 2,
                            TotalPrice = 42.19m,
                            UserId = 10
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8322),
                            PaymentStatus = 4,
                            TotalPrice = 20.29m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8324),
                            PaymentStatus = 1,
                            TotalPrice = 24.86m,
                            UserId = 13
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8326),
                            PaymentStatus = 4,
                            TotalPrice = 46.98m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8368),
                            PaymentStatus = 2,
                            TotalPrice = 23.16m,
                            UserId = 10
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8370),
                            PaymentStatus = 3,
                            TotalPrice = 33.81m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8373),
                            PaymentStatus = 1,
                            TotalPrice = 24.01m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8375),
                            PaymentStatus = 2,
                            TotalPrice = 10.94m,
                            UserId = 12
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8377),
                            PaymentStatus = 1,
                            TotalPrice = 41.31m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8379),
                            PaymentStatus = 3,
                            TotalPrice = 35.12m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateTime(2024, 1, 5, 15, 4, 24, 915, DateTimeKind.Local).AddTicks(8395),
                            PaymentStatus = 4,
                            TotalPrice = 48.11m,
                            UserId = 14
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bloomsbury"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Secker & Warburg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reynal & Hitchcock"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Penguin Books"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Random House"
                        },
                        new
                        {
                            Id = 6,
                            Name = "HarperCollins"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Macmillan Publishers"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hachette Book Group"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Scholastic Corporation"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Oxford University Press"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Cambridge University Press"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Wiley"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Elsevier"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Springer"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 9,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 13,
                            Value = 26
                        },
                        new
                        {
                            Id = 2,
                            BookId = 24,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 4,
                            Value = 54
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 7,
                            Value = 71
                        },
                        new
                        {
                            Id = 4,
                            BookId = 10,
                            Comment = "A classic that everyone should read",
                            UserId = 5,
                            Value = 82
                        },
                        new
                        {
                            Id = 5,
                            BookId = 4,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 7,
                            Value = 65
                        },
                        new
                        {
                            Id = 6,
                            BookId = 30,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 9,
                            Value = 16
                        },
                        new
                        {
                            Id = 7,
                            BookId = 23,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 2,
                            Value = 53
                        },
                        new
                        {
                            Id = 8,
                            BookId = 25,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 6,
                            Value = 34
                        },
                        new
                        {
                            Id = 9,
                            BookId = 8,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 5,
                            Value = 70
                        },
                        new
                        {
                            Id = 10,
                            BookId = 25,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 3,
                            Value = 17
                        },
                        new
                        {
                            Id = 11,
                            BookId = 34,
                            Comment = "The pacing is perfect, kept me engaged from start to finish",
                            UserId = 10,
                            Value = 10
                        },
                        new
                        {
                            Id = 12,
                            BookId = 33,
                            Comment = "This book challenged my perspective on life",
                            UserId = 9,
                            Value = 66
                        },
                        new
                        {
                            Id = 13,
                            BookId = 22,
                            Comment = "The world-building is exceptional, I felt like I was there",
                            UserId = 1,
                            Value = 84
                        },
                        new
                        {
                            Id = 14,
                            BookId = 21,
                            Comment = "A must-read for book lovers",
                            UserId = 3,
                            Value = 51
                        },
                        new
                        {
                            Id = 15,
                            BookId = 12,
                            Comment = "The author's storytelling is captivating",
                            UserId = 5,
                            Value = 17
                        },
                        new
                        {
                            Id = 16,
                            BookId = 33,
                            Comment = "This book is a page-turner, couldn't stop reading",
                            UserId = 3,
                            Value = 37
                        },
                        new
                        {
                            Id = 17,
                            BookId = 16,
                            Comment = "The dialogue between characters is witty and realistic",
                            UserId = 9,
                            Value = 79
                        },
                        new
                        {
                            Id = 18,
                            BookId = 22,
                            Comment = "I've recommended this book to all my friends",
                            UserId = 6,
                            Value = 49
                        },
                        new
                        {
                            Id = 19,
                            BookId = 28,
                            Comment = "It left me with a book hangover, couldn't stop thinking about it",
                            UserId = 4,
                            Value = 35
                        },
                        new
                        {
                            Id = 20,
                            BookId = 11,
                            Comment = "",
                            UserId = 9,
                            Value = 68
                        },
                        new
                        {
                            Id = 21,
                            BookId = 15,
                            Comment = "Couldn't get into the story, found it boring from the start",
                            UserId = 2,
                            Value = 25
                        },
                        new
                        {
                            Id = 22,
                            BookId = 1,
                            Comment = "The characters felt one-dimensional and uninteresting",
                            UserId = 8,
                            Value = 22
                        },
                        new
                        {
                            Id = 23,
                            BookId = 1,
                            Comment = "The plot was predictable, I expected more twists",
                            UserId = 4,
                            Value = 31
                        },
                        new
                        {
                            Id = 24,
                            BookId = 5,
                            Comment = "I didn't connect with the protagonist, lacked depth",
                            UserId = 11,
                            Value = 52
                        },
                        new
                        {
                            Id = 25,
                            BookId = 11,
                            Comment = "The writing style was confusing and hard to follow",
                            UserId = 14,
                            Value = 26
                        },
                        new
                        {
                            Id = 26,
                            BookId = 33,
                            Comment = "This book didn't live up to the hype, very disappointing",
                            UserId = 12,
                            Value = 37
                        },
                        new
                        {
                            Id = 27,
                            BookId = 1,
                            Comment = "The ending felt rushed and unresolved",
                            UserId = 1,
                            Value = 11
                        },
                        new
                        {
                            Id = 28,
                            BookId = 33,
                            Comment = "Too much exposition, not enough action",
                            UserId = 12,
                            Value = 78
                        },
                        new
                        {
                            Id = 29,
                            BookId = 6,
                            Comment = "I found the dialogue unrealistic and forced",
                            UserId = 1,
                            Value = 57
                        },
                        new
                        {
                            Id = 30,
                            BookId = 26,
                            Comment = "The author tried too hard to be profound, came off as pretentious",
                            UserId = 5,
                            Value = 18
                        },
                        new
                        {
                            Id = 31,
                            BookId = 17,
                            Comment = "The pacing was off, some parts dragged on while others felt rushed",
                            UserId = 4,
                            Value = 42
                        },
                        new
                        {
                            Id = 32,
                            BookId = 21,
                            Comment = "The world-building was weak and inconsistent",
                            UserId = 13,
                            Value = 79
                        },
                        new
                        {
                            Id = 33,
                            BookId = 27,
                            Comment = "I couldn't sympathize with any of the characters",
                            UserId = 11,
                            Value = 34
                        },
                        new
                        {
                            Id = 34,
                            BookId = 9,
                            Comment = "The themes explored were cliché and overdone",
                            UserId = 8,
                            Value = 75
                        },
                        new
                        {
                            Id = 35,
                            BookId = 12,
                            Comment = "The book didn't live up to the reviews, a letdown",
                            UserId = 6,
                            Value = 21
                        },
                        new
                        {
                            Id = 36,
                            BookId = 20,
                            Comment = "The grammar and editing were poor, distracting from the story",
                            UserId = 5,
                            Value = 82
                        },
                        new
                        {
                            Id = 37,
                            BookId = 18,
                            Comment = "The book felt like a rip-off of [another popular book]",
                            UserId = 1,
                            Value = 42
                        },
                        new
                        {
                            Id = 38,
                            BookId = 3,
                            Comment = "The author relied too heavily on stereotypes",
                            UserId = 8,
                            Value = 69
                        },
                        new
                        {
                            Id = 39,
                            BookId = 6,
                            Comment = "I regret spending time on this book, wish I chose something else",
                            UserId = 10,
                            Value = 79
                        },
                        new
                        {
                            Id = 40,
                            BookId = 18,
                            Comment = "The climax was anticlimactic, left me unsatisfied",
                            UserId = 9,
                            Value = 66
                        },
                        new
                        {
                            Id = 41,
                            BookId = 23,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 10,
                            Value = 41
                        },
                        new
                        {
                            Id = 42,
                            BookId = 17,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 14,
                            Value = 47
                        },
                        new
                        {
                            Id = 43,
                            BookId = 32,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 5,
                            Value = 99
                        },
                        new
                        {
                            Id = 44,
                            BookId = 25,
                            Comment = "A classic that everyone should read",
                            UserId = 14,
                            Value = 48
                        },
                        new
                        {
                            Id = 45,
                            BookId = 24,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 1,
                            Value = 37
                        },
                        new
                        {
                            Id = 46,
                            BookId = 22,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 12,
                            Value = 53
                        },
                        new
                        {
                            Id = 47,
                            BookId = 31,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 10,
                            Value = 90
                        },
                        new
                        {
                            Id = 48,
                            BookId = 15,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 7,
                            Value = 78
                        },
                        new
                        {
                            Id = 49,
                            BookId = 18,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 7,
                            Value = 17
                        },
                        new
                        {
                            Id = 50,
                            BookId = 31,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 14,
                            Value = 42
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24bfe389-1692-48bb-885e-141785333ec9",
                            Email = "Roman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Roman Mario",
                            NormalizedEmail = "ROMAN@GMAIL.COM",
                            NormalizedUserName = "ROMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEImrHSyVtb6JPZpy05KjeegJJEd2bMkSxxtWiBB7ZatbF6VKvHzo63fpb5eOUMtuEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fa4a21e-a758-45b8-aa98-a26a16933c3c",
                            TwoFactorEnabled = false,
                            UserName = "roman"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcf605f7-cf08-47e3-a553-93e4cfe549e1",
                            Email = "Beth@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Beth Story",
                            NormalizedEmail = "BETH@GMAIL.COM",
                            NormalizedUserName = "BETH",
                            PasswordHash = "AQAAAAIAAYagAAAAEHOw+tjVsQEkbfH1ABg0+s6oUtKeUyjjxj3D46uSK4H1VhZl9aTVqQqMKbkzct/NuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5544c974-374e-4efe-bdd1-a6e73a6c688b",
                            TwoFactorEnabled = false,
                            UserName = "beth"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f415759-2aa2-4fd2-9956-da4b88ddfe0b",
                            Email = "Monika@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Monika Reha",
                            NormalizedEmail = "MONIKA@GMAIL.COM",
                            NormalizedUserName = "MONIKA",
                            PasswordHash = "AQAAAAIAAYagAAAAEP1bN0f3HJ+49mZbqr+aPkpJzqH1PmKYHCQQc3DniVJ1/hzIB+NlgY+vRaD9v2nbCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfe4256e-769a-424f-b669-1394d0a22750",
                            TwoFactorEnabled = false,
                            UserName = "monika"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb45c3eb-8672-456e-9258-d687a677ebc1",
                            Email = "John@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "John Smith",
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOtEojKMr1xgqGtgSXiZMcdk0csJxCMRTfZhN7/1CXz1H5C4VlVUBd1Tq17JX+4i0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5c998c8-91b2-49ca-84fc-9530ead2541e",
                            TwoFactorEnabled = false,
                            UserName = "john"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16b117cf-5fbd-42c3-88c3-40543d0b11de",
                            Email = "James@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "James Bond",
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES",
                            PasswordHash = "AQAAAAIAAYagAAAAEG47HjRfPrVUzQzvGEzEs+7Kw6akalc84TVUW/FYLFtiRYUArQ57EcsM6+eeEoW/Iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ccee497a-7878-4c18-a596-5f746154cc61",
                            TwoFactorEnabled = false,
                            UserName = "james"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb15ff10-4c00-4b36-87d2-eafbdf1ea2ba",
                            Email = "Filip@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Filip Strong",
                            NormalizedEmail = "FILIP@GMAIL.COM",
                            NormalizedUserName = "FILIP",
                            PasswordHash = "AQAAAAIAAYagAAAAEA1+SIKGpE19KU3SCxmbYg5HLlnorPiw3GNSZVW1br/04GFtcCCJNzvr4ne7T6UhvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e1375f4-80f0-4593-a6a1-0e8891daae03",
                            TwoFactorEnabled = false,
                            UserName = "filip"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c15f7614-50f2-4833-8485-d0a6f0e97e40",
                            Email = "Random@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Random Guy",
                            NormalizedEmail = "RANDOM@GMAIL.COM",
                            NormalizedUserName = "RANDOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBGTI1Uf/mbXPb/tdTfRIX3rGBeyoKV0YJHiv3YCEHNCa3cIcwbyKLO+qsw47VIzvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8a21ca8-0b97-4dfb-b080-1e595c05bf20",
                            TwoFactorEnabled = false,
                            UserName = "random"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bc492bd-76a0-4948-97be-06410c79ba5f",
                            Email = "Jack@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jack Black",
                            NormalizedEmail = "JACK@GMAIL.COM",
                            NormalizedUserName = "JACK",
                            PasswordHash = "AQAAAAIAAYagAAAAEKn/mb12syPXFYRq/yX1p/gburqG/8677PymtAQpEar0JmyYv2mTYsgfpnLtZbcSwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4501e8e0-4825-4476-9460-af6fd3eee62d",
                            TwoFactorEnabled = false,
                            UserName = "jack"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9daa098-f77e-4076-8b8e-c2e0a85d0041",
                            Email = "Tom@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tom Smart",
                            NormalizedEmail = "TOM@GMAIL.COM",
                            NormalizedUserName = "TOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMQbhNfeetT/4kAvGWJHGPj3IZXEgxiyzCU0prU77WIEF71OT0vtwKkowpCvzVinFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a862d170-83c7-4201-9b16-535db049c70b",
                            TwoFactorEnabled = false,
                            UserName = "tom"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fde1fab-d134-4bcd-b97d-adfd9de00529",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Ali Willy",
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEKXdOmYFV743M8+j7C6LN06bTuegIETk+/1mvxUYW0icOSW5Wmx50KfbTugB9VWPSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39bf7781-c3f1-42bf-8e30-2b8fe0d9a0e8",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8eadfc09-a3bf-4e19-9ad9-8f6f0665497c",
                            Email = "Rubber@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Rubber Duck",
                            NormalizedEmail = "RUBBER@GMAIL.COM",
                            NormalizedUserName = "RUBBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMT7Do4eel8/7MAEMJujWbc2GwhyKl8fTNkLKFSpWteauEJ6UlbY7QE5eUJjwkptow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21caf7bf-7b97-4313-a6d3-5a7295eb36ed",
                            TwoFactorEnabled = false,
                            UserName = "rubber"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a14eb183-dd54-40e6-bbf6-757caee98572",
                            Email = "Olaf@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Olaf Snow",
                            NormalizedEmail = "OLAF@GMAIL.COM",
                            NormalizedUserName = "OLAF",
                            PasswordHash = "AQAAAAIAAYagAAAAEILbecrEM/mByyzWfEd1Ne3P8ySvts0QYV1Zx2TiOjOmFwOKXqUXt3PDZr3X34J97w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b185c3a-0226-4e92-9b20-ebb79cbe0b49",
                            TwoFactorEnabled = false,
                            UserName = "olaf"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b338295-6723-475a-b6f9-a5f6a2375ba0",
                            Email = "Good@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Good Programmer",
                            NormalizedEmail = "GOOD@GMAIL.COM",
                            NormalizedUserName = "GOOD",
                            PasswordHash = "AQAAAAIAAYagAAAAEEzvSrI5KuUsLEbfzTpm7VaB1ZyhQazm5xSQoxDAfiWVFe6MHQ93sfilWd+Iv13ZoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d68a75a-4cf8-4911-b86d-dcefd25e0384",
                            TwoFactorEnabled = false,
                            UserName = "good"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c14c0739-ec0b-46dc-9fd7-284fc83a9e8b",
                            Email = "Tim@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tim King",
                            NormalizedEmail = "TIM@GMAIL.COM",
                            NormalizedUserName = "TIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEYzrjqou7HtAqYgAg7CY8wDLd++BdabasNOnzJlzfSDy1dGmwC9CCW5QOZs0gaiSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "628f1456-5a5b-4586-856a-6db5633a43ac",
                            TwoFactorEnabled = false,
                            UserName = "tim"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b45d7d5-53f3-491a-9098-40114a99e189",
                            Email = "Adam@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Adam Queen",
                            NormalizedEmail = "ADAM@GMAIL.COM",
                            NormalizedUserName = "ADAM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGTPIkunI39aZ2p+tflHnctg0mow6A31+MBZOu6bAByNKeNiYv+qmv3apAwyvV7GtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b43fc8f4-0945-4bc7-a3d4-a0ba6dacbe7a",
                            TwoFactorEnabled = false,
                            UserName = "adam"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookOrder", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Genre", "PrimaryGenre")
                        .WithMany("PrimaryGenreBooks")
                        .HasForeignKey("PrimaryGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryGenre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Navigation("PrimaryGenreBooks");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
