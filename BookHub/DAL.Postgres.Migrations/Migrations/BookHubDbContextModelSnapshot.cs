// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Postgres.Migrations.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    partial class BookHubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("integer");

                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 2
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 3
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 4
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 6
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 7
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 8
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 9
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 13
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 14
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 15
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 16
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 17
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 18
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 19
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 20
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 21
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 22
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 23
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 24
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 25
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 26
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 27
                        },
                        new
                        {
                            AuthorsId = 10,
                            BooksId = 28
                        },
                        new
                        {
                            AuthorsId = 11,
                            BooksId = 29
                        },
                        new
                        {
                            AuthorsId = 12,
                            BooksId = 30
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 31
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 32
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 33
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 34
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 35
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("GenresId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenre");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            GenresId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            GenresId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 22,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 18
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            GenresId = 19
                        },
                        new
                        {
                            BooksId = 25,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 26,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 31,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 32,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 5
                        });
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("BookUser");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 22,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 25,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 26,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 31,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 32,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "J. K. Rowling"
                        },
                        new
                        {
                            Id = 2,
                            Name = "George R. R. Martin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            Id = 5,
                            Name = "J.R.R. Tolkien"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Jane Austen"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mark Twain"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Charles Dickens"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Harper Lee"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Leo Tolstoy"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Agnes Christie"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ernest Hemingway"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Virginia Woolf"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Arthur Conan Doyle"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Antoine de Saint-Exupéry"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PrimaryGenreId")
                        .HasColumnType("integer");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int>("StockInStorage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryGenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "To Kill a Mockingbird",
                            OverallRating = 89,
                            Price = 23.74m,
                            PrimaryGenreId = 13,
                            PublisherId = 14,
                            StockInStorage = 6
                        },
                        new
                        {
                            Id = 2,
                            Name = "1984",
                            OverallRating = 37,
                            Price = 11.32m,
                            PrimaryGenreId = 6,
                            PublisherId = 12,
                            StockInStorage = 4
                        },
                        new
                        {
                            Id = 3,
                            Name = "James Bond",
                            OverallRating = 66,
                            Price = 21.06m,
                            PrimaryGenreId = 4,
                            PublisherId = 3,
                            StockInStorage = 15
                        },
                        new
                        {
                            Id = 4,
                            Name = "The Great Gatsby",
                            OverallRating = 59,
                            Price = 14.15m,
                            PrimaryGenreId = 5,
                            PublisherId = 10,
                            StockInStorage = 26
                        },
                        new
                        {
                            Id = 5,
                            Name = "One Hundred Years of Solitude",
                            OverallRating = 94,
                            Price = 15.38m,
                            PrimaryGenreId = 8,
                            PublisherId = 11,
                            StockInStorage = 31
                        },
                        new
                        {
                            Id = 6,
                            Name = "The Catcher in the Rye",
                            OverallRating = 34,
                            Price = 21.3m,
                            PrimaryGenreId = 5,
                            PublisherId = 6,
                            StockInStorage = 46
                        },
                        new
                        {
                            Id = 7,
                            Name = "Brave New World",
                            OverallRating = 76,
                            Price = 18.52m,
                            PrimaryGenreId = 4,
                            PublisherId = 6,
                            StockInStorage = 27
                        },
                        new
                        {
                            Id = 8,
                            Name = "The Hobbit",
                            OverallRating = 80,
                            Price = 9.67m,
                            PrimaryGenreId = 3,
                            PublisherId = 4,
                            StockInStorage = 5
                        },
                        new
                        {
                            Id = 9,
                            Name = "Love and Basketball",
                            OverallRating = 40,
                            Price = 7.31m,
                            PrimaryGenreId = 11,
                            PublisherId = 8,
                            StockInStorage = 26
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pride and Prejudice",
                            OverallRating = 55,
                            Price = 9.32m,
                            PrimaryGenreId = 5,
                            PublisherId = 1,
                            StockInStorage = 21
                        },
                        new
                        {
                            Id = 11,
                            Name = "The Lord of the Rings: The Fellowship of the Ring",
                            OverallRating = 68,
                            Price = 6.37m,
                            PrimaryGenreId = 17,
                            PublisherId = 11,
                            StockInStorage = 41
                        },
                        new
                        {
                            Id = 12,
                            Name = "The Chronicles of Narnia: The Lion, the Witch and the Wardrobe",
                            OverallRating = 83,
                            Price = 24.18m,
                            PrimaryGenreId = 3,
                            PublisherId = 9,
                            StockInStorage = 39
                        },
                        new
                        {
                            Id = 13,
                            Name = "Harry Potter and the Philosopher's Stone",
                            OverallRating = 45,
                            Price = 14.76m,
                            PrimaryGenreId = 4,
                            PublisherId = 12,
                            StockInStorage = 25
                        },
                        new
                        {
                            Id = 14,
                            Name = "The Hunger Games",
                            OverallRating = 69,
                            Price = 21.81m,
                            PrimaryGenreId = 13,
                            PublisherId = 12,
                            StockInStorage = 18
                        },
                        new
                        {
                            Id = 15,
                            Name = "The Da Vinci Code",
                            OverallRating = 98,
                            Price = 10.14m,
                            PrimaryGenreId = 7,
                            PublisherId = 10,
                            StockInStorage = 3
                        },
                        new
                        {
                            Id = 16,
                            Name = "A Game of Thrones",
                            OverallRating = 96,
                            Price = 7.24m,
                            PrimaryGenreId = 3,
                            PublisherId = 4,
                            StockInStorage = 6
                        },
                        new
                        {
                            Id = 17,
                            Name = "The Shining",
                            OverallRating = 55,
                            Price = 15.09m,
                            PrimaryGenreId = 16,
                            PublisherId = 6,
                            StockInStorage = 8
                        },
                        new
                        {
                            Id = 18,
                            Name = "The Hitchhiker's Guide to the Galaxy",
                            OverallRating = 86,
                            Price = 9.39m,
                            PrimaryGenreId = 2,
                            PublisherId = 12,
                            StockInStorage = 20
                        },
                        new
                        {
                            Id = 19,
                            Name = "The Alchemist",
                            OverallRating = 61,
                            Price = 9.85m,
                            PrimaryGenreId = 15,
                            PublisherId = 11,
                            StockInStorage = 38
                        },
                        new
                        {
                            Id = 20,
                            Name = "War and Peace",
                            OverallRating = 55,
                            Price = 13.68m,
                            PrimaryGenreId = 16,
                            PublisherId = 1,
                            StockInStorage = 9
                        },
                        new
                        {
                            Id = 21,
                            Name = "Crime and Punishment",
                            OverallRating = 76,
                            Price = 22.56m,
                            PrimaryGenreId = 2,
                            PublisherId = 14,
                            StockInStorage = 39
                        },
                        new
                        {
                            Id = 22,
                            Name = "The Catch-22",
                            OverallRating = 70,
                            Price = 22.76m,
                            PrimaryGenreId = 12,
                            PublisherId = 5,
                            StockInStorage = 38
                        },
                        new
                        {
                            Id = 23,
                            Name = "The Grapes of Wrath",
                            OverallRating = 92,
                            Price = 21.94m,
                            PrimaryGenreId = 7,
                            PublisherId = 7,
                            StockInStorage = 22
                        },
                        new
                        {
                            Id = 24,
                            Name = "Fahrenheit 451",
                            OverallRating = 84,
                            Price = 22.53m,
                            PrimaryGenreId = 12,
                            PublisherId = 4,
                            StockInStorage = 49
                        },
                        new
                        {
                            Id = 25,
                            Name = "Lord of the Flies",
                            OverallRating = 59,
                            Price = 5.04m,
                            PrimaryGenreId = 1,
                            PublisherId = 5,
                            StockInStorage = 26
                        },
                        new
                        {
                            Id = 26,
                            Name = "Moby-Dick",
                            OverallRating = 67,
                            Price = 9.1m,
                            PrimaryGenreId = 9,
                            PublisherId = 8,
                            StockInStorage = 13
                        },
                        new
                        {
                            Id = 27,
                            Name = "Frankenstein",
                            OverallRating = 50,
                            Price = 13.18m,
                            PrimaryGenreId = 1,
                            PublisherId = 10,
                            StockInStorage = 16
                        },
                        new
                        {
                            Id = 28,
                            Name = "Alice's Adventures in Wonderland",
                            OverallRating = 83,
                            Price = 8.06m,
                            PrimaryGenreId = 4,
                            PublisherId = 5,
                            StockInStorage = 20
                        },
                        new
                        {
                            Id = 29,
                            Name = "Dracula",
                            OverallRating = 69,
                            Price = 22.59m,
                            PrimaryGenreId = 18,
                            PublisherId = 4,
                            StockInStorage = 41
                        },
                        new
                        {
                            Id = 30,
                            Name = "The Odyssey",
                            OverallRating = 68,
                            Price = 9.44m,
                            PrimaryGenreId = 18,
                            PublisherId = 7,
                            StockInStorage = 25
                        },
                        new
                        {
                            Id = 31,
                            Name = "Romeo and Juliet",
                            OverallRating = 80,
                            Price = 15.31m,
                            PrimaryGenreId = 7,
                            PublisherId = 5,
                            StockInStorage = 46
                        },
                        new
                        {
                            Id = 32,
                            Name = "Hamlet",
                            OverallRating = 89,
                            Price = 14.94m,
                            PrimaryGenreId = 10,
                            PublisherId = 3,
                            StockInStorage = 36
                        },
                        new
                        {
                            Id = 33,
                            Name = "Macbeth",
                            OverallRating = 34,
                            Price = 14.3m,
                            PrimaryGenreId = 17,
                            PublisherId = 14,
                            StockInStorage = 48
                        },
                        new
                        {
                            Id = 34,
                            Name = "Othello",
                            OverallRating = 31,
                            Price = 15.46m,
                            PrimaryGenreId = 18,
                            PublisherId = 11,
                            StockInStorage = 28
                        },
                        new
                        {
                            Id = 35,
                            Name = "The Divine Comedy",
                            OverallRating = 66,
                            Price = 10.61m,
                            PrimaryGenreId = 3,
                            PublisherId = 2,
                            StockInStorage = 1
                        },
                        new
                        {
                            Id = 36,
                            Name = "Don Quixote",
                            OverallRating = 61,
                            Price = 17.7m,
                            PrimaryGenreId = 4,
                            PublisherId = 8,
                            StockInStorage = 38
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookOrder", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.HasKey("BookId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("BookOrders");

                    b.HasData(
                        new
                        {
                            BookId = 15,
                            OrderId = 1,
                            Count = 8
                        },
                        new
                        {
                            BookId = 16,
                            OrderId = 2,
                            Count = 6
                        },
                        new
                        {
                            BookId = 26,
                            OrderId = 3,
                            Count = 6
                        },
                        new
                        {
                            BookId = 7,
                            OrderId = 4,
                            Count = 7
                        },
                        new
                        {
                            BookId = 30,
                            OrderId = 5,
                            Count = 2
                        },
                        new
                        {
                            BookId = 14,
                            OrderId = 6,
                            Count = 9
                        },
                        new
                        {
                            BookId = 10,
                            OrderId = 7,
                            Count = 7
                        },
                        new
                        {
                            BookId = 1,
                            OrderId = 8,
                            Count = 4
                        },
                        new
                        {
                            BookId = 26,
                            OrderId = 9,
                            Count = 5
                        },
                        new
                        {
                            BookId = 22,
                            OrderId = 10,
                            Count = 3
                        },
                        new
                        {
                            BookId = 17,
                            OrderId = 11,
                            Count = 7
                        },
                        new
                        {
                            BookId = 7,
                            OrderId = 12,
                            Count = 3
                        },
                        new
                        {
                            BookId = 34,
                            OrderId = 13,
                            Count = 5
                        },
                        new
                        {
                            BookId = 32,
                            OrderId = 14,
                            Count = 1
                        },
                        new
                        {
                            BookId = 30,
                            OrderId = 15,
                            Count = 9
                        },
                        new
                        {
                            BookId = 27,
                            OrderId = 16,
                            Count = 8
                        },
                        new
                        {
                            BookId = 21,
                            OrderId = 17,
                            Count = 3
                        },
                        new
                        {
                            BookId = 11,
                            OrderId = 18,
                            Count = 7
                        },
                        new
                        {
                            BookId = 9,
                            OrderId = 19,
                            Count = 3
                        },
                        new
                        {
                            BookId = 16,
                            OrderId = 20,
                            Count = 4
                        },
                        new
                        {
                            BookId = 29,
                            OrderId = 21,
                            Count = 6
                        },
                        new
                        {
                            BookId = 21,
                            OrderId = 22,
                            Count = 2
                        },
                        new
                        {
                            BookId = 26,
                            OrderId = 23,
                            Count = 3
                        },
                        new
                        {
                            BookId = 11,
                            OrderId = 24,
                            Count = 1
                        },
                        new
                        {
                            BookId = 33,
                            OrderId = 25,
                            Count = 5
                        },
                        new
                        {
                            BookId = 7,
                            OrderId = 26,
                            Count = 9
                        },
                        new
                        {
                            BookId = 19,
                            OrderId = 27,
                            Count = 7
                        },
                        new
                        {
                            BookId = 3,
                            OrderId = 28,
                            Count = 5
                        },
                        new
                        {
                            BookId = 28,
                            OrderId = 29,
                            Count = 5
                        },
                        new
                        {
                            BookId = 9,
                            OrderId = 30,
                            Count = 4
                        },
                        new
                        {
                            BookId = 32,
                            OrderId = 31,
                            Count = 2
                        },
                        new
                        {
                            BookId = 15,
                            OrderId = 32,
                            Count = 5
                        },
                        new
                        {
                            BookId = 28,
                            OrderId = 33,
                            Count = 3
                        },
                        new
                        {
                            BookId = 9,
                            OrderId = 34,
                            Count = 8
                        },
                        new
                        {
                            BookId = 3,
                            OrderId = 35,
                            Count = 4
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dystopian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Non-fiction"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Children's"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Young Adult"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Historical Romance"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Science Fantasy"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Self-help"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6388),
                            PaymentStatus = 1,
                            TotalPrice = 37.46m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6511),
                            PaymentStatus = 4,
                            TotalPrice = 41.88m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6515),
                            PaymentStatus = 1,
                            TotalPrice = 37.41m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6518),
                            PaymentStatus = 1,
                            TotalPrice = 7.18m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6529),
                            PaymentStatus = 1,
                            TotalPrice = 6.49m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6532),
                            PaymentStatus = 4,
                            TotalPrice = 35.4m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6534),
                            PaymentStatus = 2,
                            TotalPrice = 5.81m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6536),
                            PaymentStatus = 4,
                            TotalPrice = 15.8m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6538),
                            PaymentStatus = 3,
                            TotalPrice = 46.08m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6540),
                            PaymentStatus = 1,
                            TotalPrice = 12.51m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6542),
                            PaymentStatus = 1,
                            TotalPrice = 46.49m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6544),
                            PaymentStatus = 3,
                            TotalPrice = 18.98m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6546),
                            PaymentStatus = 3,
                            TotalPrice = 38.04m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6548),
                            PaymentStatus = 3,
                            TotalPrice = 44.56m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6549),
                            PaymentStatus = 3,
                            TotalPrice = 54.16m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6582),
                            PaymentStatus = 3,
                            TotalPrice = 27.89m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6584),
                            PaymentStatus = 3,
                            TotalPrice = 31.78m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6586),
                            PaymentStatus = 3,
                            TotalPrice = 6.02m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6628),
                            PaymentStatus = 3,
                            TotalPrice = 22.16m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6630),
                            PaymentStatus = 1,
                            TotalPrice = 17.38m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6632),
                            PaymentStatus = 2,
                            TotalPrice = 7.86m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6634),
                            PaymentStatus = 2,
                            TotalPrice = 17.32m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6636),
                            PaymentStatus = 1,
                            TotalPrice = 8.51m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6638),
                            PaymentStatus = 2,
                            TotalPrice = 30.1m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6640),
                            PaymentStatus = 3,
                            TotalPrice = 24.46m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6642),
                            PaymentStatus = 2,
                            TotalPrice = 48.67m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6644),
                            PaymentStatus = 2,
                            TotalPrice = 8.5m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6646),
                            PaymentStatus = 2,
                            TotalPrice = 27.88m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6648),
                            PaymentStatus = 1,
                            TotalPrice = 44.45m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6654),
                            PaymentStatus = 4,
                            TotalPrice = 34.09m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 31,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6697),
                            PaymentStatus = 2,
                            TotalPrice = 8.94m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 32,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6700),
                            PaymentStatus = 1,
                            TotalPrice = 43.23m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 33,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6702),
                            PaymentStatus = 4,
                            TotalPrice = 25.16m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 34,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6705),
                            PaymentStatus = 4,
                            TotalPrice = 17.53m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 35,
                            Date = new DateTime(2024, 1, 7, 18, 8, 56, 303, DateTimeKind.Local).AddTicks(6707),
                            PaymentStatus = 3,
                            TotalPrice = 36.15m,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bloomsbury"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Secker & Warburg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reynal & Hitchcock"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Penguin Books"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Random House"
                        },
                        new
                        {
                            Id = 6,
                            Name = "HarperCollins"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Macmillan Publishers"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hachette Book Group"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Scholastic Corporation"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Oxford University Press"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Cambridge University Press"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Wiley"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Elsevier"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Springer"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 21,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 7,
                            Value = 33
                        },
                        new
                        {
                            Id = 2,
                            BookId = 22,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 11,
                            Value = 80
                        },
                        new
                        {
                            Id = 3,
                            BookId = 21,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 1,
                            Value = 46
                        },
                        new
                        {
                            Id = 4,
                            BookId = 14,
                            Comment = "A classic that everyone should read",
                            UserId = 10,
                            Value = 78
                        },
                        new
                        {
                            Id = 5,
                            BookId = 16,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 6,
                            Value = 50
                        },
                        new
                        {
                            Id = 6,
                            BookId = 19,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 1,
                            Value = 42
                        },
                        new
                        {
                            Id = 7,
                            BookId = 24,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 13,
                            Value = 50
                        },
                        new
                        {
                            Id = 8,
                            BookId = 8,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 4,
                            Value = 82
                        },
                        new
                        {
                            Id = 9,
                            BookId = 33,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 12,
                            Value = 15
                        },
                        new
                        {
                            Id = 10,
                            BookId = 33,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 1,
                            Value = 68
                        },
                        new
                        {
                            Id = 11,
                            BookId = 22,
                            Comment = "The pacing is perfect, kept me engaged from start to finish",
                            UserId = 11,
                            Value = 29
                        },
                        new
                        {
                            Id = 12,
                            BookId = 31,
                            Comment = "This book challenged my perspective on life",
                            UserId = 8,
                            Value = 20
                        },
                        new
                        {
                            Id = 13,
                            BookId = 14,
                            Comment = "The world-building is exceptional, I felt like I was there",
                            UserId = 3,
                            Value = 43
                        },
                        new
                        {
                            Id = 14,
                            BookId = 17,
                            Comment = "A must-read for book lovers",
                            UserId = 2,
                            Value = 43
                        },
                        new
                        {
                            Id = 15,
                            BookId = 9,
                            Comment = "The author's storytelling is captivating",
                            UserId = 12,
                            Value = 42
                        },
                        new
                        {
                            Id = 16,
                            BookId = 30,
                            Comment = "This book is a page-turner, couldn't stop reading",
                            UserId = 9,
                            Value = 56
                        },
                        new
                        {
                            Id = 17,
                            BookId = 7,
                            Comment = "The dialogue between characters is witty and realistic",
                            UserId = 10,
                            Value = 86
                        },
                        new
                        {
                            Id = 18,
                            BookId = 21,
                            Comment = "I've recommended this book to all my friends",
                            UserId = 11,
                            Value = 86
                        },
                        new
                        {
                            Id = 19,
                            BookId = 33,
                            Comment = "It left me with a book hangover, couldn't stop thinking about it",
                            UserId = 9,
                            Value = 29
                        },
                        new
                        {
                            Id = 20,
                            BookId = 25,
                            Comment = "",
                            UserId = 7,
                            Value = 39
                        },
                        new
                        {
                            Id = 21,
                            BookId = 12,
                            Comment = "Couldn't get into the story, found it boring from the start",
                            UserId = 13,
                            Value = 89
                        },
                        new
                        {
                            Id = 22,
                            BookId = 11,
                            Comment = "The characters felt one-dimensional and uninteresting",
                            UserId = 10,
                            Value = 88
                        },
                        new
                        {
                            Id = 23,
                            BookId = 9,
                            Comment = "The plot was predictable, I expected more twists",
                            UserId = 13,
                            Value = 57
                        },
                        new
                        {
                            Id = 24,
                            BookId = 29,
                            Comment = "I didn't connect with the protagonist, lacked depth",
                            UserId = 13,
                            Value = 90
                        },
                        new
                        {
                            Id = 25,
                            BookId = 18,
                            Comment = "The writing style was confusing and hard to follow",
                            UserId = 14,
                            Value = 56
                        },
                        new
                        {
                            Id = 26,
                            BookId = 8,
                            Comment = "This book didn't live up to the hype, very disappointing",
                            UserId = 7,
                            Value = 87
                        },
                        new
                        {
                            Id = 27,
                            BookId = 12,
                            Comment = "The ending felt rushed and unresolved",
                            UserId = 13,
                            Value = 88
                        },
                        new
                        {
                            Id = 28,
                            BookId = 29,
                            Comment = "Too much exposition, not enough action",
                            UserId = 5,
                            Value = 62
                        },
                        new
                        {
                            Id = 29,
                            BookId = 3,
                            Comment = "I found the dialogue unrealistic and forced",
                            UserId = 6,
                            Value = 31
                        },
                        new
                        {
                            Id = 30,
                            BookId = 1,
                            Comment = "The author tried too hard to be profound, came off as pretentious",
                            UserId = 2,
                            Value = 62
                        },
                        new
                        {
                            Id = 31,
                            BookId = 16,
                            Comment = "The pacing was off, some parts dragged on while others felt rushed",
                            UserId = 5,
                            Value = 44
                        },
                        new
                        {
                            Id = 32,
                            BookId = 1,
                            Comment = "The world-building was weak and inconsistent",
                            UserId = 1,
                            Value = 29
                        },
                        new
                        {
                            Id = 33,
                            BookId = 18,
                            Comment = "I couldn't sympathize with any of the characters",
                            UserId = 7,
                            Value = 83
                        },
                        new
                        {
                            Id = 34,
                            BookId = 32,
                            Comment = "The themes explored were cliché and overdone",
                            UserId = 12,
                            Value = 24
                        },
                        new
                        {
                            Id = 35,
                            BookId = 31,
                            Comment = "The book didn't live up to the reviews, a letdown",
                            UserId = 11,
                            Value = 37
                        },
                        new
                        {
                            Id = 36,
                            BookId = 11,
                            Comment = "The grammar and editing were poor, distracting from the story",
                            UserId = 1,
                            Value = 28
                        },
                        new
                        {
                            Id = 37,
                            BookId = 6,
                            Comment = "The book felt like a rip-off of [another popular book]",
                            UserId = 5,
                            Value = 48
                        },
                        new
                        {
                            Id = 38,
                            BookId = 12,
                            Comment = "The author relied too heavily on stereotypes",
                            UserId = 7,
                            Value = 93
                        },
                        new
                        {
                            Id = 39,
                            BookId = 10,
                            Comment = "I regret spending time on this book, wish I chose something else",
                            UserId = 4,
                            Value = 49
                        },
                        new
                        {
                            Id = 40,
                            BookId = 31,
                            Comment = "The climax was anticlimactic, left me unsatisfied",
                            UserId = 8,
                            Value = 10
                        },
                        new
                        {
                            Id = 41,
                            BookId = 6,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 10,
                            Value = 61
                        },
                        new
                        {
                            Id = 42,
                            BookId = 33,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 2,
                            Value = 62
                        },
                        new
                        {
                            Id = 43,
                            BookId = 9,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 1,
                            Value = 23
                        },
                        new
                        {
                            Id = 44,
                            BookId = 34,
                            Comment = "A classic that everyone should read",
                            UserId = 3,
                            Value = 12
                        },
                        new
                        {
                            Id = 45,
                            BookId = 12,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 11,
                            Value = 83
                        },
                        new
                        {
                            Id = 46,
                            BookId = 28,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 1,
                            Value = 89
                        },
                        new
                        {
                            Id = 47,
                            BookId = 33,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 14,
                            Value = 33
                        },
                        new
                        {
                            Id = 48,
                            BookId = 21,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 9,
                            Value = 25
                        },
                        new
                        {
                            Id = 49,
                            BookId = 20,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 11,
                            Value = 20
                        },
                        new
                        {
                            Id = 50,
                            BookId = 14,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 13,
                            Value = 58
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "106376e6-68f4-43cb-8909-c83c80ecf635",
                            Email = "roman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Roman Mario",
                            NormalizedEmail = "ROMAN@GMAIL.COM",
                            NormalizedUserName = "ROMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFK0VMckfQDvyVrR3JuVWIK83fJWjgvAJPtQ7hARz/Iuyt8//QlbeA3BlI1iXjK2vw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fd1d5da-9479-4bf5-b562-fa4e35db744a",
                            TwoFactorEnabled = false,
                            UserName = "roman"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fa36924-64e8-4917-b16f-01bcf643c8a3",
                            Email = "beth@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Beth Story",
                            NormalizedEmail = "BETH@GMAIL.COM",
                            NormalizedUserName = "BETH",
                            PasswordHash = "AQAAAAIAAYagAAAAENKrSi5e6FVExqsdBvnU+UjVjoHGU1NDerlmaDaLLuLTbZSz3aMQut0BMdr/dmp3qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9cca287-cb4b-4567-bd4a-60cf38f786b4",
                            TwoFactorEnabled = false,
                            UserName = "beth"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "986c58e1-bb35-4efa-8b7e-f8467421475c",
                            Email = "monika@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Monika Reha",
                            NormalizedEmail = "MONIKA@GMAIL.COM",
                            NormalizedUserName = "MONIKA",
                            PasswordHash = "AQAAAAIAAYagAAAAENXiUET0AbOq3YMhjn4wW+hYtoG1Gh2dQx93/8vmnMH9930QbIovsrUi7GfHD4A0FQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b6d3ee3-8734-4290-a844-eb2914cb4b94",
                            TwoFactorEnabled = false,
                            UserName = "monika"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44189074-4b21-4b15-a919-d85579e22cbc",
                            Email = "john@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "John Smith",
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC90+hdZ/m/22JNvytBvpbvyhr4xVZuWHNzmhy7Iopca6oIV8aDWgT5S/wmWgzPbCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb840ece-277f-4c49-9519-c6c1b551da84",
                            TwoFactorEnabled = false,
                            UserName = "john"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab9fe786-b3e1-4128-9765-ee18828b732d",
                            Email = "james@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "James Bond",
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES",
                            PasswordHash = "AQAAAAIAAYagAAAAEPjFnbB/9CzYS7ctht8XUwadyg12ibMBWHcYbkExmXUxMCWBxSLmERCq77bk7SMG/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fa5d32a-a334-44af-9712-e2c5957eb37c",
                            TwoFactorEnabled = false,
                            UserName = "james"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77193ae1-6559-41b3-8d3b-9d0856d6db8f",
                            Email = "filip@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Filip Strong",
                            NormalizedEmail = "FILIP@GMAIL.COM",
                            NormalizedUserName = "FILIP",
                            PasswordHash = "AQAAAAIAAYagAAAAEDe1xHSR55JRDxwmyO773JbIRfpoXhQVqJMbn3B6LUw2jU9dDSzuKoEOQy1JF07U3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e45f580-c40b-4ca1-8a5e-ad5a2feaf446",
                            TwoFactorEnabled = false,
                            UserName = "filip"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0eebaa9-9413-45d5-92be-237a6ba44146",
                            Email = "random@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Random Guy",
                            NormalizedEmail = "RANDOM@GMAIL.COM",
                            NormalizedUserName = "RANDOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFbIZpy3KjXLX346cCuyj/C1k7bcRciGYNjl+6Ht64+XsgvDkCIKbAKgsPu6+YznyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fc11d7d-a56c-466c-bc83-50486764bec5",
                            TwoFactorEnabled = false,
                            UserName = "random"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8a44730-96b1-43b8-be88-31591a4119d7",
                            Email = "jack@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jack Black",
                            NormalizedEmail = "JACK@GMAIL.COM",
                            NormalizedUserName = "JACK",
                            PasswordHash = "AQAAAAIAAYagAAAAEIwKINTWom7HasZWyqZDxdYM31RII3jmMgvIqmQsL2QgbHHjtj1DIZLMpmyrXgPGeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac4fa9cf-53dd-456b-8cfe-1ff23857b277",
                            TwoFactorEnabled = false,
                            UserName = "jack"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b67566f-6a87-434f-9761-0c0aee356547",
                            Email = "tom@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tom Smart",
                            NormalizedEmail = "TOM@GMAIL.COM",
                            NormalizedUserName = "TOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPYNno8965+fkiC2ZpwKpMZ/UyA0oM01k2NYw5TRdUzFRCHkkjhgEnZ6PTtkL0WtFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a17cf5c-da37-476c-8a3a-b2bbec593ca3",
                            TwoFactorEnabled = false,
                            UserName = "tom"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6de3ecd3-e789-43bd-a408-948ab5da29f2",
                            Email = "ali@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Ali Willy",
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEIE6NjYSX+9wCP4FZ+ogfy1BhwjQzqSrmkENFFFKaWp4krahJYYhuZw6X4q7KnTnvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9506e5f2-a084-48bc-ae92-85b2da694703",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62b39023-be4d-4b29-b288-dfd7dbdcd6f0",
                            Email = "rubber@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Rubber Duck",
                            NormalizedEmail = "RUBBER@GMAIL.COM",
                            NormalizedUserName = "RUBBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEOxGH8O90dP8K1jRASbtiVMrIwdD/MRxQ9QczcmxPJj0bc73+sJqYpUBhVLP+q7ZBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d088d0fd-a8d1-4d97-91d2-97453a117706",
                            TwoFactorEnabled = false,
                            UserName = "rubber"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "343e97d6-a0b3-4645-a416-3b8ef5b9a855",
                            Email = "olaf@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Olaf Snow",
                            NormalizedEmail = "OLAF@GMAIL.COM",
                            NormalizedUserName = "OLAF",
                            PasswordHash = "AQAAAAIAAYagAAAAEBczxExAsHlYjpMTgK8TnkegcCBGA8i+uHGlSdu+814z28ECP0Td32SnhV4gquwECA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b42ed8a7-6d82-476c-8d81-1053479e847f",
                            TwoFactorEnabled = false,
                            UserName = "olaf"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94f21aff-ab42-44f6-ab6d-460b5cf87a34",
                            Email = "good@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Good Programmer",
                            NormalizedEmail = "GOOD@GMAIL.COM",
                            NormalizedUserName = "GOOD",
                            PasswordHash = "AQAAAAIAAYagAAAAENJNwKOO5R5hFIFym4TaLNh6JXNhjY93qKthDH4TAA1pSs4QjXT1sf0+DC2iBB3gCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf39ce0f-e1bd-441c-b43b-1486963f4b86",
                            TwoFactorEnabled = false,
                            UserName = "good"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55ed1278-2930-41db-9451-32bb5ffb4bed",
                            Email = "tim@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tim King",
                            NormalizedEmail = "TIM@GMAIL.COM",
                            NormalizedUserName = "TIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBfjXt4uwh8m9PArVm4evCm3FV6Ct3YO76xTXWDGPAk3MvYKMAB3k9zhhm2/PJJrEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97515e99-e175-4575-90ca-65ccbe76b86d",
                            TwoFactorEnabled = false,
                            UserName = "tim"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fa7f809-1480-46c0-a95b-c60bc8aeb945",
                            Email = "adam@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Adam Queen",
                            NormalizedEmail = "ADAM@GMAIL.COM",
                            NormalizedUserName = "ADAM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDQu7ATGgwuIKsVkRMxxTJFI8nW1qmA4xlN0VU7LsOgNNXGFpYOl4RhxaHTOuSsVUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09211eeb-44bd-4a6c-a18d-b61191f68525",
                            TwoFactorEnabled = false,
                            UserName = "adam"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Genre", "PrimaryGenre")
                        .WithMany("PrimaryGenreBooks")
                        .HasForeignKey("PrimaryGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryGenre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookOrder", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany("BookOrders")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Order", "Order")
                        .WithMany("BookOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Navigation("BookOrders");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Navigation("PrimaryGenreBooks");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Navigation("BookOrders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
