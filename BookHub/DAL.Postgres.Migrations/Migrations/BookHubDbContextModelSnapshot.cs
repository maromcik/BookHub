// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Postgres.Migrations.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    partial class BookHubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("integer");

                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 2
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 3
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 4
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 6
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 7
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 8
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 9
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 13
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 14
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 15
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 16
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 17
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 18
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 19
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 20
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 21
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 22
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 23
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 24
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 25
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 26
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 27
                        },
                        new
                        {
                            AuthorsId = 10,
                            BooksId = 28
                        },
                        new
                        {
                            AuthorsId = 11,
                            BooksId = 29
                        },
                        new
                        {
                            AuthorsId = 12,
                            BooksId = 30
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 31
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 32
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 33
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 34
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 35
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("GenresId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenre");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            GenresId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            GenresId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 22,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 18
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            GenresId = 19
                        },
                        new
                        {
                            BooksId = 25,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 26,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 31,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 32,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 5
                        });
                });

            modelBuilder.Entity("BookOrder", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("OrdersId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("BookOrder");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            OrdersId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            OrdersId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            OrdersId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            OrdersId = 30
                        },
                        new
                        {
                            BooksId = 6,
                            OrdersId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            OrdersId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            OrdersId = 29
                        },
                        new
                        {
                            BooksId = 8,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            OrdersId = 28
                        },
                        new
                        {
                            BooksId = 10,
                            OrdersId = 27
                        },
                        new
                        {
                            BooksId = 12,
                            OrdersId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            OrdersId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            OrdersId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            OrdersId = 26
                        },
                        new
                        {
                            BooksId = 14,
                            OrdersId = 25
                        },
                        new
                        {
                            BooksId = 15,
                            OrdersId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            OrdersId = 24
                        },
                        new
                        {
                            BooksId = 17,
                            OrdersId = 23
                        },
                        new
                        {
                            BooksId = 18,
                            OrdersId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 12
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 22
                        },
                        new
                        {
                            BooksId = 20,
                            OrdersId = 21
                        },
                        new
                        {
                            BooksId = 20,
                            OrdersId = 20
                        },
                        new
                        {
                            BooksId = 21,
                            OrdersId = 9
                        },
                        new
                        {
                            BooksId = 22,
                            OrdersId = 10
                        },
                        new
                        {
                            BooksId = 23,
                            OrdersId = 11
                        },
                        new
                        {
                            BooksId = 23,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            OrdersId = 2
                        },
                        new
                        {
                            BooksId = 25,
                            OrdersId = 1
                        },
                        new
                        {
                            BooksId = 26,
                            OrdersId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            OrdersId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            OrdersId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            OrdersId = 15
                        },
                        new
                        {
                            BooksId = 31,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 32,
                            OrdersId = 16
                        },
                        new
                        {
                            BooksId = 33,
                            OrdersId = 16
                        },
                        new
                        {
                            BooksId = 33,
                            OrdersId = 17
                        },
                        new
                        {
                            BooksId = 34,
                            OrdersId = 18
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 19
                        });
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("BookUser");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 22,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 25,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 26,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 31,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 32,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "J. K. Rowling"
                        },
                        new
                        {
                            Id = 2,
                            Name = "George R. R. Martin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            Id = 5,
                            Name = "J.R.R. Tolkien"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Jane Austen"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mark Twain"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Charles Dickens"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Harper Lee"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Leo Tolstoy"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Agnes Christie"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ernest Hemingway"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Virginia Woolf"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Arthur Conan Doyle"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Antoine de Saint-Exupéry"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PrimaryGenreId")
                        .HasColumnType("integer");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int>("StockInStorage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryGenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "To Kill a Mockingbird",
                            OverallRating = 55,
                            Price = 14.6m,
                            PrimaryGenreId = 15,
                            PublisherId = 1,
                            StockInStorage = 13
                        },
                        new
                        {
                            Id = 2,
                            Name = "1984",
                            OverallRating = 93,
                            Price = 22.48m,
                            PrimaryGenreId = 11,
                            PublisherId = 14,
                            StockInStorage = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "James Bond",
                            OverallRating = 81,
                            Price = 21.49m,
                            PrimaryGenreId = 2,
                            PublisherId = 7,
                            StockInStorage = 36
                        },
                        new
                        {
                            Id = 4,
                            Name = "The Great Gatsby",
                            OverallRating = 40,
                            Price = 20.25m,
                            PrimaryGenreId = 18,
                            PublisherId = 14,
                            StockInStorage = 34
                        },
                        new
                        {
                            Id = 5,
                            Name = "One Hundred Years of Solitude",
                            OverallRating = 39,
                            Price = 10.8m,
                            PrimaryGenreId = 8,
                            PublisherId = 8,
                            StockInStorage = 45
                        },
                        new
                        {
                            Id = 6,
                            Name = "The Catcher in the Rye",
                            OverallRating = 55,
                            Price = 22.61m,
                            PrimaryGenreId = 12,
                            PublisherId = 11,
                            StockInStorage = 21
                        },
                        new
                        {
                            Id = 7,
                            Name = "Brave New World",
                            OverallRating = 54,
                            Price = 18.03m,
                            PrimaryGenreId = 1,
                            PublisherId = 3,
                            StockInStorage = 49
                        },
                        new
                        {
                            Id = 8,
                            Name = "The Hobbit",
                            OverallRating = 55,
                            Price = 22.57m,
                            PrimaryGenreId = 19,
                            PublisherId = 11,
                            StockInStorage = 4
                        },
                        new
                        {
                            Id = 9,
                            Name = "Love and Basketball",
                            OverallRating = 74,
                            Price = 12.11m,
                            PrimaryGenreId = 14,
                            PublisherId = 3,
                            StockInStorage = 42
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pride and Prejudice",
                            OverallRating = 53,
                            Price = 19.61m,
                            PrimaryGenreId = 19,
                            PublisherId = 13,
                            StockInStorage = 9
                        },
                        new
                        {
                            Id = 11,
                            Name = "The Lord of the Rings: The Fellowship of the Ring",
                            OverallRating = 47,
                            Price = 23.99m,
                            PrimaryGenreId = 18,
                            PublisherId = 5,
                            StockInStorage = 49
                        },
                        new
                        {
                            Id = 12,
                            Name = "The Chronicles of Narnia: The Lion, the Witch and the Wardrobe",
                            OverallRating = 74,
                            Price = 17.23m,
                            PrimaryGenreId = 12,
                            PublisherId = 6,
                            StockInStorage = 24
                        },
                        new
                        {
                            Id = 13,
                            Name = "Harry Potter and the Philosopher's Stone",
                            OverallRating = 42,
                            Price = 17.48m,
                            PrimaryGenreId = 19,
                            PublisherId = 8,
                            StockInStorage = 37
                        },
                        new
                        {
                            Id = 14,
                            Name = "The Hunger Games",
                            OverallRating = 55,
                            Price = 12.44m,
                            PrimaryGenreId = 2,
                            PublisherId = 9,
                            StockInStorage = 6
                        },
                        new
                        {
                            Id = 15,
                            Name = "The Da Vinci Code",
                            OverallRating = 49,
                            Price = 15.94m,
                            PrimaryGenreId = 13,
                            PublisherId = 7,
                            StockInStorage = 35
                        },
                        new
                        {
                            Id = 16,
                            Name = "A Game of Thrones",
                            OverallRating = 35,
                            Price = 21.1m,
                            PrimaryGenreId = 7,
                            PublisherId = 13,
                            StockInStorage = 40
                        },
                        new
                        {
                            Id = 17,
                            Name = "The Shining",
                            OverallRating = 35,
                            Price = 5.8m,
                            PrimaryGenreId = 5,
                            PublisherId = 3,
                            StockInStorage = 11
                        },
                        new
                        {
                            Id = 18,
                            Name = "The Hitchhiker's Guide to the Galaxy",
                            OverallRating = 52,
                            Price = 12.25m,
                            PrimaryGenreId = 18,
                            PublisherId = 8,
                            StockInStorage = 45
                        },
                        new
                        {
                            Id = 19,
                            Name = "The Alchemist",
                            OverallRating = 63,
                            Price = 5.23m,
                            PrimaryGenreId = 9,
                            PublisherId = 7,
                            StockInStorage = 20
                        },
                        new
                        {
                            Id = 20,
                            Name = "War and Peace",
                            OverallRating = 81,
                            Price = 6.77m,
                            PrimaryGenreId = 11,
                            PublisherId = 11,
                            StockInStorage = 16
                        },
                        new
                        {
                            Id = 21,
                            Name = "Crime and Punishment",
                            OverallRating = 34,
                            Price = 6.52m,
                            PrimaryGenreId = 18,
                            PublisherId = 10,
                            StockInStorage = 41
                        },
                        new
                        {
                            Id = 22,
                            Name = "The Catch-22",
                            OverallRating = 53,
                            Price = 15.15m,
                            PrimaryGenreId = 17,
                            PublisherId = 10,
                            StockInStorage = 29
                        },
                        new
                        {
                            Id = 23,
                            Name = "The Grapes of Wrath",
                            OverallRating = 81,
                            Price = 8.75m,
                            PrimaryGenreId = 7,
                            PublisherId = 5,
                            StockInStorage = 48
                        },
                        new
                        {
                            Id = 24,
                            Name = "Fahrenheit 451",
                            OverallRating = 83,
                            Price = 9.81m,
                            PrimaryGenreId = 13,
                            PublisherId = 5,
                            StockInStorage = 6
                        },
                        new
                        {
                            Id = 25,
                            Name = "Lord of the Flies",
                            OverallRating = 36,
                            Price = 19.78m,
                            PrimaryGenreId = 11,
                            PublisherId = 14,
                            StockInStorage = 8
                        },
                        new
                        {
                            Id = 26,
                            Name = "Moby-Dick",
                            OverallRating = 92,
                            Price = 7.73m,
                            PrimaryGenreId = 1,
                            PublisherId = 3,
                            StockInStorage = 1
                        },
                        new
                        {
                            Id = 27,
                            Name = "Frankenstein",
                            OverallRating = 93,
                            Price = 5.94m,
                            PrimaryGenreId = 7,
                            PublisherId = 4,
                            StockInStorage = 30
                        },
                        new
                        {
                            Id = 28,
                            Name = "Alice's Adventures in Wonderland",
                            OverallRating = 46,
                            Price = 20.91m,
                            PrimaryGenreId = 16,
                            PublisherId = 5,
                            StockInStorage = 49
                        },
                        new
                        {
                            Id = 29,
                            Name = "Dracula",
                            OverallRating = 61,
                            Price = 17.59m,
                            PrimaryGenreId = 8,
                            PublisherId = 4,
                            StockInStorage = 28
                        },
                        new
                        {
                            Id = 30,
                            Name = "The Odyssey",
                            OverallRating = 74,
                            Price = 21.72m,
                            PrimaryGenreId = 7,
                            PublisherId = 5,
                            StockInStorage = 15
                        },
                        new
                        {
                            Id = 31,
                            Name = "Romeo and Juliet",
                            OverallRating = 41,
                            Price = 7.56m,
                            PrimaryGenreId = 8,
                            PublisherId = 2,
                            StockInStorage = 3
                        },
                        new
                        {
                            Id = 32,
                            Name = "Hamlet",
                            OverallRating = 60,
                            Price = 20.43m,
                            PrimaryGenreId = 1,
                            PublisherId = 3,
                            StockInStorage = 49
                        },
                        new
                        {
                            Id = 33,
                            Name = "Macbeth",
                            OverallRating = 75,
                            Price = 5.14m,
                            PrimaryGenreId = 19,
                            PublisherId = 7,
                            StockInStorage = 32
                        },
                        new
                        {
                            Id = 34,
                            Name = "Othello",
                            OverallRating = 77,
                            Price = 24.56m,
                            PrimaryGenreId = 12,
                            PublisherId = 1,
                            StockInStorage = 29
                        },
                        new
                        {
                            Id = 35,
                            Name = "The Divine Comedy",
                            OverallRating = 37,
                            Price = 14.57m,
                            PrimaryGenreId = 4,
                            PublisherId = 13,
                            StockInStorage = 4
                        },
                        new
                        {
                            Id = 36,
                            Name = "Don Quixote",
                            OverallRating = 99,
                            Price = 20.81m,
                            PrimaryGenreId = 5,
                            PublisherId = 12,
                            StockInStorage = 48
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dystopian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Non-fiction"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Children's"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Young Adult"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Historical Romance"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Science Fantasy"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Self-help"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7598),
                            TotalPrice = 34.88m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7735),
                            TotalPrice = 7.56m,
                            UserId = 11
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7738),
                            TotalPrice = 18.28m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7741),
                            TotalPrice = 22.1m,
                            UserId = 12
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7750),
                            TotalPrice = 29.82m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7753),
                            TotalPrice = 38.2m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7754),
                            TotalPrice = 7.13m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7756),
                            TotalPrice = 54.35m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7758),
                            TotalPrice = 10.6m,
                            UserId = 12
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7760),
                            TotalPrice = 29.92m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7762),
                            TotalPrice = 15.1m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7763),
                            TotalPrice = 17.76m,
                            UserId = 10
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7765),
                            TotalPrice = 49.15m,
                            UserId = 5
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7767),
                            TotalPrice = 29.23m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7768),
                            TotalPrice = 14.9m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7787),
                            TotalPrice = 35.49m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7789),
                            TotalPrice = 39.67m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7791),
                            TotalPrice = 54.46m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7793),
                            TotalPrice = 52.73m,
                            UserId = 12
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7795),
                            TotalPrice = 40.01m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7796),
                            TotalPrice = 6.26m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7798),
                            TotalPrice = 42.97m,
                            UserId = 12
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7799),
                            TotalPrice = 18.03m,
                            UserId = 14
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7801),
                            TotalPrice = 15.86m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7803),
                            TotalPrice = 24.07m,
                            UserId = 5
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7804),
                            TotalPrice = 40.92m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7806),
                            TotalPrice = 24.8m,
                            UserId = 11
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7808),
                            TotalPrice = 16.64m,
                            UserId = 11
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7809),
                            TotalPrice = 54.41m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateTime(2024, 1, 3, 8, 39, 44, 934, DateTimeKind.Local).AddTicks(7818),
                            TotalPrice = 46.47m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bloomsbury"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Secker & Warburg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reynal & Hitchcock"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Penguin Books"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Random House"
                        },
                        new
                        {
                            Id = 6,
                            Name = "HarperCollins"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Macmillan Publishers"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hachette Book Group"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Scholastic Corporation"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Oxford University Press"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Cambridge University Press"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Wiley"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Elsevier"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Springer"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 4,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 5,
                            Value = 34
                        },
                        new
                        {
                            Id = 2,
                            BookId = 20,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 8,
                            Value = 17
                        },
                        new
                        {
                            Id = 3,
                            BookId = 34,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 7,
                            Value = 48
                        },
                        new
                        {
                            Id = 4,
                            BookId = 20,
                            Comment = "A classic that everyone should read",
                            UserId = 9,
                            Value = 79
                        },
                        new
                        {
                            Id = 5,
                            BookId = 16,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 3,
                            Value = 26
                        },
                        new
                        {
                            Id = 6,
                            BookId = 11,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 5,
                            Value = 10
                        },
                        new
                        {
                            Id = 7,
                            BookId = 30,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 3,
                            Value = 63
                        },
                        new
                        {
                            Id = 8,
                            BookId = 6,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 10,
                            Value = 38
                        },
                        new
                        {
                            Id = 9,
                            BookId = 27,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 9,
                            Value = 74
                        },
                        new
                        {
                            Id = 10,
                            BookId = 21,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 7,
                            Value = 67
                        },
                        new
                        {
                            Id = 11,
                            BookId = 7,
                            Comment = "The pacing is perfect, kept me engaged from start to finish",
                            UserId = 5,
                            Value = 57
                        },
                        new
                        {
                            Id = 12,
                            BookId = 21,
                            Comment = "This book challenged my perspective on life",
                            UserId = 5,
                            Value = 49
                        },
                        new
                        {
                            Id = 13,
                            BookId = 20,
                            Comment = "The world-building is exceptional, I felt like I was there",
                            UserId = 13,
                            Value = 85
                        },
                        new
                        {
                            Id = 14,
                            BookId = 25,
                            Comment = "A must-read for book lovers",
                            UserId = 5,
                            Value = 50
                        },
                        new
                        {
                            Id = 15,
                            BookId = 32,
                            Comment = "The author's storytelling is captivating",
                            UserId = 8,
                            Value = 97
                        },
                        new
                        {
                            Id = 16,
                            BookId = 17,
                            Comment = "This book is a page-turner, couldn't stop reading",
                            UserId = 14,
                            Value = 69
                        },
                        new
                        {
                            Id = 17,
                            BookId = 11,
                            Comment = "The dialogue between characters is witty and realistic",
                            UserId = 13,
                            Value = 65
                        },
                        new
                        {
                            Id = 18,
                            BookId = 4,
                            Comment = "I've recommended this book to all my friends",
                            UserId = 11,
                            Value = 81
                        },
                        new
                        {
                            Id = 19,
                            BookId = 33,
                            Comment = "It left me with a book hangover, couldn't stop thinking about it",
                            UserId = 6,
                            Value = 85
                        },
                        new
                        {
                            Id = 20,
                            BookId = 24,
                            Comment = "",
                            UserId = 8,
                            Value = 54
                        },
                        new
                        {
                            Id = 21,
                            BookId = 25,
                            Comment = "Couldn't get into the story, found it boring from the start",
                            UserId = 7,
                            Value = 25
                        },
                        new
                        {
                            Id = 22,
                            BookId = 22,
                            Comment = "The characters felt one-dimensional and uninteresting",
                            UserId = 11,
                            Value = 29
                        },
                        new
                        {
                            Id = 23,
                            BookId = 6,
                            Comment = "The plot was predictable, I expected more twists",
                            UserId = 11,
                            Value = 20
                        },
                        new
                        {
                            Id = 24,
                            BookId = 10,
                            Comment = "I didn't connect with the protagonist, lacked depth",
                            UserId = 2,
                            Value = 23
                        },
                        new
                        {
                            Id = 25,
                            BookId = 15,
                            Comment = "The writing style was confusing and hard to follow",
                            UserId = 8,
                            Value = 49
                        },
                        new
                        {
                            Id = 26,
                            BookId = 24,
                            Comment = "This book didn't live up to the hype, very disappointing",
                            UserId = 13,
                            Value = 27
                        },
                        new
                        {
                            Id = 27,
                            BookId = 33,
                            Comment = "The ending felt rushed and unresolved",
                            UserId = 4,
                            Value = 50
                        },
                        new
                        {
                            Id = 28,
                            BookId = 29,
                            Comment = "Too much exposition, not enough action",
                            UserId = 8,
                            Value = 95
                        },
                        new
                        {
                            Id = 29,
                            BookId = 16,
                            Comment = "I found the dialogue unrealistic and forced",
                            UserId = 11,
                            Value = 47
                        },
                        new
                        {
                            Id = 30,
                            BookId = 18,
                            Comment = "The author tried too hard to be profound, came off as pretentious",
                            UserId = 1,
                            Value = 71
                        },
                        new
                        {
                            Id = 31,
                            BookId = 27,
                            Comment = "The pacing was off, some parts dragged on while others felt rushed",
                            UserId = 12,
                            Value = 34
                        },
                        new
                        {
                            Id = 32,
                            BookId = 4,
                            Comment = "The world-building was weak and inconsistent",
                            UserId = 4,
                            Value = 89
                        },
                        new
                        {
                            Id = 33,
                            BookId = 15,
                            Comment = "I couldn't sympathize with any of the characters",
                            UserId = 2,
                            Value = 64
                        },
                        new
                        {
                            Id = 34,
                            BookId = 17,
                            Comment = "The themes explored were cliché and overdone",
                            UserId = 14,
                            Value = 88
                        },
                        new
                        {
                            Id = 35,
                            BookId = 29,
                            Comment = "The book didn't live up to the reviews, a letdown",
                            UserId = 6,
                            Value = 76
                        },
                        new
                        {
                            Id = 36,
                            BookId = 6,
                            Comment = "The grammar and editing were poor, distracting from the story",
                            UserId = 12,
                            Value = 15
                        },
                        new
                        {
                            Id = 37,
                            BookId = 3,
                            Comment = "The book felt like a rip-off of [another popular book]",
                            UserId = 10,
                            Value = 42
                        },
                        new
                        {
                            Id = 38,
                            BookId = 6,
                            Comment = "The author relied too heavily on stereotypes",
                            UserId = 2,
                            Value = 87
                        },
                        new
                        {
                            Id = 39,
                            BookId = 2,
                            Comment = "I regret spending time on this book, wish I chose something else",
                            UserId = 1,
                            Value = 29
                        },
                        new
                        {
                            Id = 40,
                            BookId = 20,
                            Comment = "The climax was anticlimactic, left me unsatisfied",
                            UserId = 7,
                            Value = 96
                        },
                        new
                        {
                            Id = 41,
                            BookId = 14,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 8,
                            Value = 37
                        },
                        new
                        {
                            Id = 42,
                            BookId = 18,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 10,
                            Value = 64
                        },
                        new
                        {
                            Id = 43,
                            BookId = 16,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 1,
                            Value = 86
                        },
                        new
                        {
                            Id = 44,
                            BookId = 3,
                            Comment = "A classic that everyone should read",
                            UserId = 2,
                            Value = 43
                        },
                        new
                        {
                            Id = 45,
                            BookId = 30,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 1,
                            Value = 85
                        },
                        new
                        {
                            Id = 46,
                            BookId = 9,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 11,
                            Value = 86
                        },
                        new
                        {
                            Id = 47,
                            BookId = 11,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 13,
                            Value = 57
                        },
                        new
                        {
                            Id = 48,
                            BookId = 6,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 5,
                            Value = 56
                        },
                        new
                        {
                            Id = 49,
                            BookId = 3,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 14,
                            Value = 60
                        },
                        new
                        {
                            Id = 50,
                            BookId = 21,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 6,
                            Value = 79
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "feef03e1-15f6-486e-b6d3-e8050e19ae6c",
                            Email = "Roman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Roman Mario",
                            NormalizedEmail = "ROMAN@GMAIL.COM",
                            NormalizedUserName = "ROMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEH6C+4MamiRLn0ul05P83MjZ7x2ncOWgBllCf0ucSfaLD0XgrkkG6MeCu/Gx1Yf9zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea682c0c-84af-4767-90a6-a771fd4574cc",
                            TwoFactorEnabled = false,
                            UserName = "roman"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "453f2ee2-0c6e-497d-9e9e-7eb925b24792",
                            Email = "Beth@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Beth Story",
                            NormalizedEmail = "BETH@GMAIL.COM",
                            NormalizedUserName = "BETH",
                            PasswordHash = "AQAAAAIAAYagAAAAEA2XFbfpgfpmgcv0opVWpoLIfy6NT4uk4l1DX/Qe9qIA/jrjBnUKDJ6SWfvGfxv6lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7267ce6-de57-43e5-a51c-77db61e2d428",
                            TwoFactorEnabled = false,
                            UserName = "beth"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c996284c-c2d4-4240-b30b-1cb39bb3ab2f",
                            Email = "Monika@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Monika Reha",
                            NormalizedEmail = "MONIKA@GMAIL.COM",
                            NormalizedUserName = "MONIKA",
                            PasswordHash = "AQAAAAIAAYagAAAAECbTWylvL6V4Xd17SkATeeSgV/dlOTzE6AR/UhfOOS1Ni+5a+baJNb6AQqpxIG5IVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "745ded9e-afcc-44e2-9153-404fd05aaf69",
                            TwoFactorEnabled = false,
                            UserName = "monika"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df996483-45c6-4708-bd01-0847ccf1a3a0",
                            Email = "John@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "John Smith",
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDf8HpIIGlso/0HeZ3u8q3s1PayRQfImtr1mCXP82wn+CXCeDxPntJ1W5z+9Lyd4JA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "388843f0-8b9d-408f-9335-9f93233f0cc6",
                            TwoFactorEnabled = false,
                            UserName = "john"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b825bed2-76e1-4542-bf34-1446ef2ad02d",
                            Email = "James@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "James Bond",
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES",
                            PasswordHash = "AQAAAAIAAYagAAAAEK4NW6TyGZRHLqpKfeg7A1pzmW8NVJbzAgsEZP49CfpVBXGR8r+DjIBKoYZU1qVgPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55095d4d-fc8e-451c-b500-83b889b1b86a",
                            TwoFactorEnabled = false,
                            UserName = "james"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5a02965-9131-4d27-adc0-90e7f48f32c0",
                            Email = "Filip@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Filip Strong",
                            NormalizedEmail = "FILIP@GMAIL.COM",
                            NormalizedUserName = "FILIP",
                            PasswordHash = "AQAAAAIAAYagAAAAECS4/gQgYj9HrZdp7t3rppx0kTU28ystjN99DvtRJNPSEFUHYWycZlCU+zEzHXtPcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff311d5e-638d-47ca-9858-f9cab9e54b70",
                            TwoFactorEnabled = false,
                            UserName = "filip"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca756bf5-190d-4a19-9c21-b36d4593704a",
                            Email = "Random@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Random Guy",
                            NormalizedEmail = "RANDOM@GMAIL.COM",
                            NormalizedUserName = "RANDOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJMw55QoFOd4TRhO2fbqUfDLVPCc2Snq6X/SY/51iPcvUtM1HmzigJuUR97UfPuuzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d22fccd6-c035-43d7-aaa9-343faff01bd8",
                            TwoFactorEnabled = false,
                            UserName = "random"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b715159-fb27-4749-8974-30c552f57329",
                            Email = "Jack@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jack Black",
                            NormalizedEmail = "JACK@GMAIL.COM",
                            NormalizedUserName = "JACK",
                            PasswordHash = "AQAAAAIAAYagAAAAEIJQP3vstwaE0V5aApIz6RK39FalfSu2YDxBal/6gTpWir7DtCsGs9i0pE4aa3k43w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d15d2d0-3179-4679-a061-e62f2b41ac4d",
                            TwoFactorEnabled = false,
                            UserName = "jack"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8adbb9b1-a383-49de-909b-99344a5d162b",
                            Email = "Tom@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tom Smart",
                            NormalizedEmail = "TOM@GMAIL.COM",
                            NormalizedUserName = "TOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB+zYnPugU0e+fXyQtKniL58C23YikeiPOjYKhYa28zK3+L0B0YZ7KA9+u0jjm4RYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86b0df7d-638c-4da7-b37b-e0783239bb0e",
                            TwoFactorEnabled = false,
                            UserName = "tom"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc538191-3aac-470b-ae73-c121702797ef",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Ali Willy",
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEIClCQgWNuv0IB2RkCSfcdjdI4zvP36BrrTMOJX859Ic1dJpGeunKVdxsBkoalfdmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1902db6e-b287-42cd-b130-0874205d0852",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e7c39bf-b40c-4b09-9a2d-a3d7b0f07f23",
                            Email = "Rubber@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Rubber Duck",
                            NormalizedEmail = "RUBBER@GMAIL.COM",
                            NormalizedUserName = "RUBBER",
                            PasswordHash = "AQAAAAIAAYagAAAAELNznTgncLEpo3rtQgkzg00IPJGq+LbXyzwpR3OfqXr20VOJczU7p53WFdV+d3Lwig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eae9fe62-e4cf-4b3d-ae37-0805ea8f2c7c",
                            TwoFactorEnabled = false,
                            UserName = "rubber"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdd58b9b-fc5e-4cb6-9048-95fdd030ef3e",
                            Email = "Olaf@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Olaf Snow",
                            NormalizedEmail = "OLAF@GMAIL.COM",
                            NormalizedUserName = "OLAF",
                            PasswordHash = "AQAAAAIAAYagAAAAEJkF6trIA72hAXejaO+gH/h8ym+OMUMrsjUD7qLIPpP9czN8TmdslRIBWo2AiK0GsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94fa9f83-fe00-46c3-8baa-7ac428bcd11a",
                            TwoFactorEnabled = false,
                            UserName = "olaf"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf4c79f2-e48b-46f4-b802-573b13b3a7bd",
                            Email = "Good@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Good Programmer",
                            NormalizedEmail = "GOOD@GMAIL.COM",
                            NormalizedUserName = "GOOD",
                            PasswordHash = "AQAAAAIAAYagAAAAEJKG3LjE5aQyUO+e/byEwblBURM90+LEzjsYtRA8Nu8Oid13vgg/VGt9VzQj16hVPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7957ef14-bad9-407b-bd8c-be9e31d81444",
                            TwoFactorEnabled = false,
                            UserName = "good"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2091a370-26c9-4f12-b406-4d4a1d41da25",
                            Email = "Tim@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tim King",
                            NormalizedEmail = "TIM@GMAIL.COM",
                            NormalizedUserName = "TIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGseOH13gRV3joZKjfhz/TqhvaBcjPx6eNjREEnCsOzdOiMBf7Wy1pFHseII66832A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2b1d739-5850-4e14-9f1d-fbf2ccbf76c4",
                            TwoFactorEnabled = false,
                            UserName = "tim"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c14156c1-081e-48ad-83af-a1235fb04ca1",
                            Email = "Adam@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Adam Queen",
                            NormalizedEmail = "ADAM@GMAIL.COM",
                            NormalizedUserName = "ADAM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP8ACMqkaYSgtY/oj8jZ7hIkFGIX3BOpzqseDctNpbfb0hs/+zBxLeVz1xvXnNsaog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed9e54cb-8359-4924-bdb2-c30716d9ba1b",
                            TwoFactorEnabled = false,
                            UserName = "adam"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookOrder", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Genre", "PrimaryGenre")
                        .WithMany("PrimaryGenreBooks")
                        .HasForeignKey("PrimaryGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryGenre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Navigation("PrimaryGenreBooks");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
